<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="5.8.0_0_d22680c87" segtype="sentence" srclang="en-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-US">
        <seg>&lt;a0&gt;Initialization scripts&lt;/a0&gt; make it extremely easy to apply build logic across all projects on a single machine.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101416Z" creationid="pingfangx" creationdate="20220419T101416Z">
        <seg>&lt;a0&gt;Initialization scripts&lt;/a0&gt; 使在一台机器上的所有项目中应用构建逻辑变得极其容易。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082142Z" creationid="pingfangx" creationdate="20220420T082142Z">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; uses the same &lt;a1&gt;source code conventions&lt;/a1&gt; applicable to Java and Groovy projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095432Z" creationid="pingfangx" creationdate="20220419T095415Z">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; 使用了同样适用于 Java 和 Groovy 项目的 &lt;a1&gt;源代码约定&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;myproject.java-conventions&lt;/c0&gt; - configures conventions that are generic for any Java project in the organization.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105907Z" creationid="pingfangx" creationdate="20220419T105907Z">
        <seg>&lt;c0&gt;myproject.java-conventions&lt;/c0&gt; - 配置组织中任何 java 项目的通用约定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;myproject.library-conventions&lt;/c0&gt; - adds publishing configuration to publish to the organization’s repository and checks for mandatory content in a README.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105955Z" creationid="pingfangx" creationdate="20220419T105955Z">
        <seg>&lt;c0&gt;myproject.library-conventions&lt;/c0&gt; - 添加发布配置以发布到组织的存储库，并检查自述文件中的强制内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c0&gt;org.gradle&lt;/c0&gt; and &lt;c1&gt;com.gradleware&lt;/c1&gt; namespaces may not be used.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083202Z" creationid="pingfangx" creationdate="20220420T083147Z">
        <seg>不能使用 &lt;c0&gt;org.gradle&lt;/c0&gt; 和 &lt;c1&gt;com.gradleware&lt;/c1&gt; 名称空间。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c3&gt;buildSrc&lt;/c3&gt; should be preferred over &lt;a4&gt;script plugins&lt;/a4&gt; as it is easier to maintain, refactor and test the code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095247Z" creationid="pingfangx" creationdate="20220419T095211Z">
        <seg>&lt;c3&gt;buildSrc&lt;/c3&gt; 应优先于 &lt;a4&gt;script plugins&lt;/a4&gt;，因为它更容易维护、重构和测试代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;c4&gt;«plugin version»&lt;/c4&gt; is also a string.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072638Z" creationid="pingfangx" creationdate="20220420T072638Z">
        <seg>&lt;c4&gt;«plugin version»&lt;/c4&gt; 也是一个字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;Applying&lt;/e0&gt; a plugin means actually executing the plugin’s &lt;a1&gt;Plugin.apply(T)&lt;/a1&gt; on the Project you want to enhance with the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065723Z" creationid="pingfangx" creationdate="20220420T065631Z">
        <seg>&lt;e0&gt;应用&lt;/e0&gt; 插件意味着在你希望通过插件增强的项目上，实际执行插件的 &lt;a1&gt;Plugin.apply(T)&lt;/a1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;Resolving&lt;/e0&gt; a plugin means finding the correct version of the jar which contains a given plugin and adding it to the script classpath.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065512Z" creationid="pingfangx" creationdate="20220420T065356Z">
        <seg>&lt;e0&gt;解析&lt;/e0&gt; 插件，意味着找到包含给定插件的正确版本的 jar，并将其添加到脚本类路径中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;command line applications&lt;/e0&gt; - applications with specific packaging requirements</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052336Z" creationid="pingfangx" creationdate="20220408T052325Z">
        <seg>&lt;e0&gt;command line applications&lt;/e0&gt; - 具有特定打包要求的应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;internal libraries&lt;/e0&gt; - libraries on which other subprojects depend on internally within the project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052318Z" creationid="pingfangx" creationdate="20220408T052259Z">
        <seg>&lt;e0&gt;internal libraries&lt;/e0&gt; - 项目内部其他子项目依赖的库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;public libraries&lt;/e0&gt; - libraries that are published to some repository</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T040036Z" creationid="pingfangx" creationdate="20220408T035812Z">
        <seg>&lt;e0&gt;public libraries&lt;/e0&gt; - 发布到某个仓库的库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>&lt;e0&gt;web services&lt;/e0&gt; - applications with specific packaging requirements that are different from above</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052356Z" creationid="pingfangx" creationdate="20220408T052343Z">
        <seg>&lt;e0&gt;web services&lt;/e0&gt; - 具有与上述不同的特定打包要求的应用程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A &lt;c0&gt;plugins {}&lt;/c0&gt; block inside &lt;c1&gt;pluginManagement {}&lt;/c1&gt; allows all plugin versions for the build to be defined in a single location.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075212Z" creationid="pingfangx" creationdate="20220420T075211Z">
        <seg>&lt;c1&gt;pluginManagement {}&lt;/c1&gt; 中的 &lt;c0&gt;plugins {}&lt;/c0&gt; 块允许在单个位置定义构建的所有插件版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A Gradle plugin packages up reusable pieces of build logic, which can be used across many different projects and builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081844Z" creationid="pingfangx" creationdate="20220420T081843Z">
        <seg>Gradle 插件打包了可重用的构建逻辑，可以在许多不同的项目和构建中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A change in &lt;c0&gt;buildSrc&lt;/c0&gt; causes the whole project to become out-of-date.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100333Z" creationid="pingfangx" creationdate="20220419T100303Z">
        <seg>&lt;c0&gt;buildSrc&lt;/c0&gt; 中的更改会导致整个项目过期。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A custom Gradle distribution is comprised of the standard Gradle distribution plus one or many custom initialization scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101928Z" creationid="pingfangx" creationdate="20220419T101534Z">
        <seg>自定义 Gradle 分发由标准 Gradle 分发和一个或多个自定义初始化脚本组成。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A plugin can instead receive a parameter of type &lt;a2&gt;Settings&lt;/a2&gt;, in which case the plugin can be applied in a settings script, or a parameter of type &lt;a3&gt;Gradle&lt;/a3&gt;, in which case the plugin can be applied in an initialization script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092047Z" creationid="pingfangx" creationdate="20220420T092025Z">
        <seg>插件可以接收类型为 &lt;a2&gt;Settings&lt;/a2&gt; 的参数，在这种情况下，插件可以应用于 settings 脚本，或者类型为 &lt;a3&gt;Gradle&lt;/a3&gt; 的参数，在这种情况下，插件可以应用于初始化脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A plugin is simply any class that implements the &lt;a0&gt;Plugin&lt;/a0&gt; interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070428Z" creationid="pingfangx" creationdate="20220420T070420Z">
        <seg>插件只是实现 &lt;a0&gt;Plugin&lt;/a0&gt; 接口的任何类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A plugin often starts out as a script plugin (because they are easy to write) and then, as the code becomes more valuable, it’s migrated to a binary plugin that can be easily tested and shared between multiple projects or organizations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064601Z" creationid="pingfangx" creationdate="20220420T064600Z">
        <seg>一个插件通常从脚本插件开始(因为它们很容易编写)，然后，随着代码变得更有价值，它被迁移到一个二进制插件，可以在多个项目或组织之间轻松测试和共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A plugin should define the &lt;e0&gt;type&lt;/e0&gt; of a subproject.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052711Z" creationid="pingfangx" creationdate="20220408T052659Z">
        <seg>插件应定义子项目的 &lt;e0&gt;类型&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081751Z" creationid="pingfangx" creationdate="20220420T081749Z">
        <seg>独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typical Gradle project with a settings file look as such:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094246Z" creationid="pingfangx" creationdate="20220419T094238Z">
        <seg>带有 settings 文件的典型 Gradle 项目如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typical project including &lt;c0&gt;buildSrc&lt;/c0&gt; has the following layout.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100217Z" creationid="pingfangx" creationdate="20220419T100201Z">
        <seg>一个典型的包含 &lt;c0&gt;buildSrc&lt;/c0&gt; 的项目具有以下布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>A typical project setup places the &lt;c0&gt;gradle.properties&lt;/c0&gt; file in the root directory of the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100923Z" creationid="pingfangx" creationdate="20220419T100907Z">
        <seg>典型的项目设置会放置 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件位于构建的根目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Additional dependencies can be declared in a dedicated &lt;c2&gt;build.gradle&lt;/c2&gt; under &lt;c3&gt;buildSrc&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095513Z" creationid="pingfangx" creationdate="20220419T095442Z">
        <seg>其他依赖项可以在专用的 &lt;c3&gt;buildSrc&lt;/c3&gt; 目录下的 &lt;c2&gt;build.gradle&lt;/c2&gt; 中声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Aligning Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062855Z" creationid="pingfangx" creationdate="20220420T062852Z">
        <seg>对齐依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All Gradle core plugins follow the software engineering paradigm &lt;a0&gt;convention over configuration&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093206Z" creationid="pingfangx" creationdate="20220419T093126Z">
        <seg>所有 Gradle 核心插件都遵循软件工程范式 &lt;a0&gt;convention over configuration&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All of the useful features, like the ability to compile Java code, are added by &lt;e0&gt;plugins&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063707Z" creationid="pingfangx" creationdate="20220420T063632Z">
        <seg>所有有用的功能，比如编译 Java 代码，都是由 &lt;e0&gt;插件&lt;/e0&gt; 添加的</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All other binary plugins must use the fully qualified form of the plugin id (e.g. &lt;c3&gt;com.github.foo.bar&lt;/c3&gt;), although some legacy plugins may still utilize a short, unqualified form.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070153Z" creationid="pingfangx" creationdate="20220420T070152Z">
        <seg>所有其他二进制插件必须使用插件 id 的完全限定形式(例如 &lt;c3&gt;com.github.foo.bar&lt;/c3&gt;)，尽管一些遗留插件可能仍然使用简短的、不限定的形式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>All plugins created in this sample contain functional tests that use &lt;a0&gt;TestKit&lt;/a0&gt; to verify their behavior.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110254Z" creationid="pingfangx" creationdate="20220419T110238Z">
        <seg>本示例中创建的所有插件都包含使用 &lt;a0&gt;TestKit&lt;/a0&gt; 检验其行为的功能测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allow different plugins to use different versions of dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071726Z" creationid="pingfangx" creationdate="20220420T071718Z">
        <seg>允许不同的插件使用不同版本的依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Allows a higher degree of modularization, enhancing comprehensibility and organization</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064111Z" creationid="pingfangx" creationdate="20220420T064111Z">
        <seg>允许更高程度的模块化，增强可理解性和组织性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Also note that the &lt;a0&gt;Plugin&lt;/a0&gt; class is a generic type.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091954Z" creationid="pingfangx" creationdate="20220420T091937Z">
        <seg>还要注意的是，&lt;a0&gt;Plugin&lt;/a0&gt; 类是一种泛型类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Alternatively, the file can also live in the &lt;c1&gt;GRADLE_USER_HOME&lt;/c1&gt; directory if you want to it apply to all builds on your machine.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100950Z" creationid="pingfangx" creationdate="20220419T100926Z">
        <seg>或者，如果希望将该文件应用于计算机上的所有构建，则该文件也可以位于 &lt;c1&gt;GRADLE_USER_HOME&lt;/c1&gt; 目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Although there are conventional similarities between plugin ids and package names, package names are generally more detailed than is necessary for a plugin id.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083234Z" creationid="pingfangx" creationdate="20220420T083234Z">
        <seg>虽然插件 id 和包名之间有传统的相似之处，但包名通常比插件 id 所需的更详细。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always add a &lt;c0&gt;settings.gradle&lt;/c0&gt; to the root directory of your build to avoid the initial performance impact.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094208Z" creationid="pingfangx" creationdate="20220419T094154Z">
        <seg>因此始终将 &lt;c0&gt;settings.gradle&lt;/c0&gt; 添加到构建的根目录中以避免初始性能影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Always define a settings file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094011Z" creationid="pingfangx" creationdate="20220419T094006Z">
        <seg>总是定义一个 settings 文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>An extension object is simply an object with Java Bean properties that represent the configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092250Z" creationid="pingfangx" creationdate="20220420T092249Z">
        <seg>扩展对象只是一个具有代表配置的 JavaBean 属性的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>And because an extension object is simply a regular object, you can provide your own DSL nested inside the plugin block by adding properties and methods to the extension object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094017Z" creationid="pingfangx" creationdate="20220420T094017Z">
        <seg>因为扩展对象只是一个普通对象，所以可以通过向扩展对象添加属性和方法来提供嵌套在插件块中的自己的 DSL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another, discouraged, way to share build logic between subproject is &lt;e0&gt;cross project configuration&lt;/e0&gt; via the &lt;c1&gt;subprojects {}&lt;/c1&gt; and &lt;c2&gt;allprojects {}&lt;/c2&gt; DSL constructs.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055110Z" creationid="pingfangx" creationdate="20220408T054959Z">
        <seg>另一种不推荐的在子项目之间共享构建逻辑的方法是，通过 &lt;c1&gt;subprojects {}&lt;/c1&gt; 和 &lt;c2&gt;allprojects {}&lt;/c2&gt; DSL 结构来进行 &lt;e0&gt;跨项目配置&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Another, more complex and real-world example of a multi-project build that composes build logic using convention plugins is the build of the &lt;a0&gt;Gradle Build Tool&lt;/a0&gt; itself.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093751Z" creationid="pingfangx" creationdate="20220408T054641Z">
        <seg>另一个更复杂、更真实的多项目使用约定插件来配置构建逻辑的示例，是  &lt;a0&gt;Gradle Build Tool&lt;/a0&gt; 本身的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Any code under &lt;c1&gt;buildSrc&lt;/c1&gt; should use a package similar to application code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100222Z" creationid="pingfangx" creationdate="20220419T100222Z">
        <seg>&lt;c1&gt;buildSrc&lt;/c1&gt; 下的任何代码都应该使用类似于应用程序代码的包。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Apply specific configuration (e.g. add organizational repositories or enforce standards)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064009Z" creationid="pingfangx" creationdate="20220420T063948Z">
        <seg>应用特定配置(例如，添加组织存库或 enforce 标准)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying a binary plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071301Z" creationid="pingfangx" creationdate="20220420T071301Z">
        <seg>应用二进制插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying a plugin to a project allows the plugin to extend the project’s capabilities.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063905Z" creationid="pingfangx" creationdate="20220420T063904Z">
        <seg>将插件应用到项目中可以使插件扩展项目的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying an external plugin in precompiled script plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T022151Z" creationid="pingfangx" creationdate="20220420T022149Z">
        <seg>在预编译脚本插件中应用外部插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying and testing changes in downstream dependencies without publishing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052722Z" creationid="pingfangx" creationdate="20220420T052721Z">
        <seg>在不发布的情况下应用和测试下游依赖项中的更改。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying external plugins in precompiled script plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090013Z" creationid="pingfangx" creationdate="20220420T090011Z">
        <seg>在预编译脚本插件中应用外部插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying external plugins with same version to subprojects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071012Z" creationid="pingfangx" creationdate="20220420T071012Z">
        <seg>将相同版本的外部插件应用于子项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying other precompiled script plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T030948Z" creationid="pingfangx" creationdate="20220420T030948Z">
        <seg>应用其他预编译脚本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins from the &lt;e0&gt;buildSrc&lt;/e0&gt; directory</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071029Z" creationid="pingfangx" creationdate="20220420T071029Z">
        <seg>从 &lt;e0&gt;buildSrc&lt;/e0&gt; 目录应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins is &lt;e2&gt;idempotent&lt;/e2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065740Z" creationid="pingfangx" creationdate="20220420T065725Z">
        <seg>应用插件是 &lt;e2&gt;idempotent (幂等的)&lt;/e2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins or other configuration to subprojects of certain type.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055705Z" creationid="pingfangx" creationdate="20220408T055704Z">
        <seg>将插件或其他配置应用于特定类型的子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins with the buildscript block</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071313Z" creationid="pingfangx" creationdate="20220420T071313Z">
        <seg>使用 buildscript 块应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins with the plugins DSL</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070922Z" creationid="pingfangx" creationdate="20220420T070914Z">
        <seg>使用 plugins DSL 应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Applying plugins:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064047Z" creationid="pingfangx" creationdate="20220420T064047Z">
        <seg>应用插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>As an example, let’s say a project with three subprojects produces two public Java libraries that use the third subproject as an internal shared library.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105019Z" creationid="pingfangx" creationdate="20220419T105017Z">
        <seg>例如，假设一个包含三个子项目的项目生成两个公共 Java 库，它们使用第三个子项目作为内部共享库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>At the same time, the subprojects that share one common trait may serve different purposes - they may produce different &lt;e4&gt;artifact types&lt;/e4&gt; that further differentiate them, for example:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052558Z" creationid="pingfangx" creationdate="20220408T035533Z">
        <seg>同时，共享一个共同特征的子项目可能有不同的用途——它们可能会产生不同 &lt;e4&gt;artifact types&lt;/e4&gt;，会进一步区分它们，例如：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authoring C++/Swift Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063339Z" creationid="pingfangx" creationdate="20220420T063339Z">
        <seg>编写 C++/Swift 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authoring Gradle Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062308Z" creationid="pingfangx" creationdate="20220420T061419Z">
        <seg>编写 Gradle 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authoring JVM Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062234Z" creationid="pingfangx" creationdate="20220420T062226Z">
        <seg>编写 JVM 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authoring Sustainable Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062328Z" creationid="pingfangx" creationdate="20220420T061842Z">
        <seg>编写可持续的构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Authoring Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062342Z" creationid="pingfangx" creationdate="20220420T061919Z">
        <seg>编写任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Avoid overlapping task outputs</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101014Z" creationid="pingfangx" creationdate="20220419T101014Z">
        <seg>避免任务输出重叠</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Avoiding Traps</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061541Z" creationid="pingfangx" creationdate="20220420T061541Z">
        <seg>避免陷阱</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Avoiding Unnecessary Task Configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062005Z" creationid="pingfangx" creationdate="20220420T062004Z">
        <seg>避免不必要的任务配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Behind the scenes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081829Z" creationid="pingfangx" creationdate="20220420T081814Z">
        <seg>幕后细节</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065943Z" creationid="pingfangx" creationdate="20220420T065943Z">
        <seg>二进制插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary plugins are written either programmatically by implementing &lt;a2&gt;Plugin&lt;/a2&gt; interface or declaratively using one of Gradle’s DSL languages.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064158Z" creationid="pingfangx" creationdate="20220420T064157Z">
        <seg>二进制插件可以通过实现 &lt;a2&gt;Plugin&lt;/a2&gt; 接口以编程方式编写，也可以使用 Gradle 的一种 DSL 语言以声明方式编写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary plugins can reside within a build script, within the project hierarchy or externally in a plugin jar.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064423Z" creationid="pingfangx" creationdate="20220420T064400Z">
        <seg>二进制插件可以驻留在项目层次结构的构建脚本，或外部插件 jar 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Binary plugins that have been published as external jar files can be added to a project by adding the plugin to the build script classpath and then applying the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081342Z" creationid="pingfangx" creationdate="20220420T081302Z">
        <seg>已发布为外部 jar 文件的二进制插件，可以通过将插件添加到构建脚本类路径中，然后再应用插件来添加到项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build a simple Android app.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052641Z" creationid="pingfangx" creationdate="20220420T052641Z">
        <seg>构建一个简单的 Android 应用程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build logs for public Continuous Integration services are world-viewable and can expose this sensitive information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090542Z" creationid="pingfangx" creationdate="20220420T090501Z">
        <seg>公共持续集成的服务构建日志是全局可视的，会公开这些敏感信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Build organization</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T034630Z" creationid="pingfangx" creationdate="20220420T034628Z">
        <seg>构建组织</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Building C++ projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063345Z" creationid="pingfangx" creationdate="20220420T063342Z">
        <seg>构建 C++ 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Building Java &amp; JVM projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062455Z" creationid="pingfangx" creationdate="20220420T062441Z">
        <seg>构建 Java &amp; JVM 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Building Swift projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063403Z" creationid="pingfangx" creationdate="20220420T063356Z">
        <seg>构建 Swift 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Bundle the initialization scripts with the Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101840Z" creationid="pingfangx" creationdate="20220419T101832Z">
        <seg>将初始化脚本与 Gradle 分发捆绑在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>But, you can use the &lt;c6&gt;apply false&lt;/c6&gt; syntax to tell Gradle not to apply the plugin to the current project and then use the &lt;c7&gt;plugins {}&lt;/c7&gt; block without the version in subprojects' build scripts:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073429Z" creationid="pingfangx" creationdate="20220420T073304Z">
        <seg>但是，你可以使用 &lt;c6&gt;apply false&lt;/c6&gt; 语法来告诉 Gradle 不要将插件应用于当前项目，然后在子项目构建脚本中使用不带版本的 &lt;c7&gt;plugins {}&lt;/c7&gt; 块：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By applying &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; plugin we state: this is a "Java" project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110207Z" creationid="pingfangx" creationdate="20220419T110143Z">
        <seg>通过应用 &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; 插件我们声明：这是一个“Java”项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By applying &lt;c1&gt;myproject.library-conventions&lt;/c1&gt; plugin we state: this is a "Library" project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110224Z" creationid="pingfangx" creationdate="20220419T110215Z">
        <seg>通过应用 &lt;c1&gt;myproject.library-conventions&lt;/c1&gt; 插件我们声明：这是一个“Library”项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By applying plugins, rather than adding logic to the project build script, we can reap a number of benefits.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064045Z" creationid="pingfangx" creationdate="20220420T064018Z">
        <seg>比起向项目构建脚本中添加逻辑，通过应用插件我们可以获得许多好处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By default, the &lt;c0&gt;plugins {}&lt;/c0&gt; DSL resolves plugins from the public &lt;a1&gt;Gradle Plugin Portal.&lt;/a1&gt; Many build authors would also like to resolve plugins from private Maven or Ivy repositories because the plugins contain proprietary implementation details, or just to have more control over what plugins are available to their builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T074511Z" creationid="pingfangx" creationdate="20220420T074357Z">
        <seg>默认情况下，&lt;c0&gt;plugins {}&lt;/c0&gt;DSL 从公共的 &lt;a1&gt;Gradle Plugin Portal&lt;/a1&gt; 解析插件。但许多构建作者还希望从私有 Maven 或 Ivy 仓库解析插件，因为这些插件包含专有的实现细节，或者只是为了更好地控制哪些插件可用于他们的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By sticking to the default conventions, new developers to the project immediately know how to find their way around.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093654Z" creationid="pingfangx" creationdate="20220419T093505Z">
        <seg>通过坚持默认约定，项目的新开发人员立即知道如何找到解决方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>By this, the actual location will only be resolved when the file is needed and can be reconfigured at any time during build configuration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094316Z" creationid="pingfangx" creationdate="20220420T094243Z">
        <seg>这样，只有在需要文件时才会解析实际位置，并且可以在构建配置期间随时重新配置文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Caching Android Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063306Z" creationid="pingfangx" creationdate="20220420T063306Z">
        <seg>缓存 Android 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Caching Java Project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063302Z" creationid="pingfangx" creationdate="20220420T063302Z">
        <seg>缓存 Java 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Can only be used in build scripts and settings file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072841Z" creationid="pingfangx" creationdate="20220420T072822Z">
        <seg>只能在构建脚本和 settings 文件中使用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cannot contain consecutive '.' characters (i.e. '..').</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083227Z" creationid="pingfangx" creationdate="20220420T083221Z">
        <seg>不能包含连续的“.”字符(即“..”)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cannot start or end with a '.' character.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083219Z" creationid="pingfangx" creationdate="20220420T083206Z">
        <seg>不能以“.”字符开头或结尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Capturing user input from the build script through an extension and mapping it to input/output properties of a custom task is a useful pattern.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094544Z" creationid="pingfangx" creationdate="20220420T094543Z">
        <seg>通过扩展从构建脚本捕获用户输入，并将其映射到自定义任务的输入/输出属性是一种有用的模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Change the Wrapper files of all projects to point to the URL of the custom Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101924Z" creationid="pingfangx" creationdate="20220419T101855Z">
        <seg>将所有项目的包装文件更改为指向自定义 Gradle 分发的 URL。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Code quality rules apply to all of the &lt;e2&gt;code&lt;/e2&gt; subprojects but not the &lt;e3&gt;documentation&lt;/e3&gt; subproject.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T060409Z" creationid="pingfangx" creationdate="20220408T035455Z">
        <seg>代码质量规则适用于所有 &lt;e2&gt;代码&lt;/e2&gt; 子项目，但不适用于 &lt;e3&gt;文档&lt;/e3&gt; 子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Command-Line Interface</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061256Z" creationid="pingfangx" creationdate="20220420T061155Z">
        <seg>命令行界面</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compatibility Notes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060924Z" creationid="pingfangx" creationdate="20220420T060924Z">
        <seg>兼容性说明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Compiling convention plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110316Z" creationid="pingfangx" creationdate="20220419T110316Z">
        <seg>编译约定插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Complex build logic is usually a good candidate for being encapsulated either as custom task or binary plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094919Z" creationid="pingfangx" creationdate="20220419T094918Z">
        <seg>复杂的构建逻辑通常适合封装为自定义任务或二进制插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Composing Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061836Z" creationid="pingfangx" creationdate="20220420T061802Z">
        <seg>复合构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configure the project according to conventions (e.g. add new tasks or configure sensible defaults)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063937Z" creationid="pingfangx" creationdate="20220420T063936Z">
        <seg>根据约定配置项目(例如，添加新任务或配置合理的默认值)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring Tasks Lazily</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062002Z" creationid="pingfangx" creationdate="20220420T061941Z">
        <seg>延时配置任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the Build Environment</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061325Z" creationid="pingfangx" creationdate="20220420T061325Z">
        <seg>配置构建环境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Configuring the Gradle Daemon</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061330Z" creationid="pingfangx" creationdate="20220420T061330Z">
        <seg>配置 Gradle 守护程序</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Constrained Syntax</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070955Z" creationid="pingfangx" creationdate="20220420T070954Z">
        <seg>受限语法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Controlling Transitives</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062842Z" creationid="pingfangx" creationdate="20220420T062830Z">
        <seg>控制传递性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Convention Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060320Z" creationid="pingfangx" creationdate="20220420T060314Z">
        <seg>约定插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conventionally use a lowercase reverse domain name convention for the namespace.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083129Z" creationid="pingfangx" creationdate="20220420T083118Z">
        <seg>按照惯例，名称空间使用小写的反向域名约定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Conventionally use only lowercase characters in the name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083142Z" creationid="pingfangx" creationdate="20220420T083141Z">
        <seg>按照惯例，名称中只使用小写字符。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core Gradle plugins are special in that they provide short names, such as &lt;c1&gt;'java'&lt;/c1&gt; for the core &lt;a2&gt;JavaPlugin&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070142Z" creationid="pingfangx" creationdate="20220420T070118Z">
        <seg>核心 Gradle 插件的特殊之处在于，它们提供了简短的名称，例如核心 &lt;a2&gt;JavaPlugin&lt;/a2&gt; 的名称为 &lt;c1&gt;'java'&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063429Z" creationid="pingfangx" creationdate="20220420T063429Z">
        <seg>核心插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Core binary plugins provided as part of the Gradle distribution are automatically resolved.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065617Z" creationid="pingfangx" creationdate="20220420T065546Z">
        <seg>作为 Gradle 分发的一部分提供的核心二进制插件也会自动解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a Basic Multi-Project Build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061627Z" creationid="pingfangx" creationdate="20220420T061627Z">
        <seg>创建基本的多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Creating a plugin id</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082806Z" creationid="pingfangx" creationdate="20220420T082806Z">
        <seg>创建插件 id</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cross configuration can also introduce &lt;a3&gt;configuration-time coupling between projects&lt;/a3&gt;, which can prevent optimizations like &lt;a4&gt;configuration-on-demand&lt;/a4&gt; from working properly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055501Z" creationid="pingfangx" creationdate="20220408T055311Z">
        <seg>跨项目配置还会在项目之间引入 &lt;a3&gt;项目间配置时耦合&lt;/a3&gt;，这会阻止类似 &lt;a4&gt;configuration-on-demand&lt;/a4&gt; 这样的优化正常工作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Cross project configuration</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T054939Z" creationid="pingfangx" creationdate="20220408T054939Z">
        <seg>跨项目配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Gradle distributions are a practical solution to this very problem.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101927Z" creationid="pingfangx" creationdate="20220419T101501Z">
        <seg>自定义 Gradle 分发是对此问题的实用解决方案。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Gradle distributions may also contain a &lt;c0&gt;gradle.properties&lt;/c0&gt; file in the root of the distribution, which provide an organization-wide &lt;a1&gt;set of properties that control the build environment&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101749Z" creationid="pingfangx" creationdate="20220419T101607Z">
        <seg>自定义 Gradle 分发也可能包含分发根目录中的 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件，该文件提供了一组组织范围内的 &lt;a1&gt;控制构建环境的属性&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Maven and Ivy plugin repositories must contain &lt;a0&gt;plugin marker artifacts&lt;/a0&gt; in addition to the artifacts which actually implement the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080121Z" creationid="pingfangx" creationdate="20220420T075952Z">
        <seg>自定义 Maven 和 Ivy 插件库，除了实际实现插件的库以外，还必须包含 &lt;a0&gt;plugin marker artifacts&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom Plugin Repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071138Z" creationid="pingfangx" creationdate="20220420T071056Z">
        <seg>自定义插件仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Custom task and plugin implementations should not live in the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095018Z" creationid="pingfangx" creationdate="20220419T094957Z">
        <seg>自定义任务和插件实现不应该保存到构建脚本中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061318Z" creationid="pingfangx" creationdate="20220420T061314Z">
        <seg>自定义执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Publishing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063156Z" creationid="pingfangx" creationdate="20220420T063149Z">
        <seg>自定义发布</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Customizing Resolution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062918Z" creationid="pingfangx" creationdate="20220420T062911Z">
        <seg>定制解析</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Debugging Caching Issues</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063309Z" creationid="pingfangx" creationdate="20220420T063309Z">
        <seg>调试缓存问题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declare properties in &lt;c0&gt;gradle.properties&lt;/c0&gt; file</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100508Z" creationid="pingfangx" creationdate="20220419T100504Z">
        <seg>在 &lt;c0&gt;gradle.properties&lt;/c0&gt; 文件中声明属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Capabilities of a Library</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062956Z" creationid="pingfangx" creationdate="20220420T062956Z">
        <seg>声明库的功能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062647Z" creationid="pingfangx" creationdate="20220420T062645Z">
        <seg>声明依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Dependencies between Subprojects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061633Z" creationid="pingfangx" creationdate="20220420T061633Z">
        <seg>声明子项目之间的依赖关系</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Repositories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062643Z" creationid="pingfangx" creationdate="20220420T062639Z">
        <seg>宣布仓库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Rich Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062719Z" creationid="pingfangx" creationdate="20220420T062719Z">
        <seg>声明富版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Variant Attributes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063042Z" creationid="pingfangx" creationdate="20220420T063035Z">
        <seg>声明变体属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062712Z" creationid="pingfangx" creationdate="20220420T062712Z">
        <seg>声明版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Declaring Versions and Ranges</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062715Z" creationid="pingfangx" creationdate="20220420T062714Z">
        <seg>声明版本和范围</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Define one or many initialization scripts with the desired logic.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101827Z" creationid="pingfangx" creationdate="20220419T101825Z">
        <seg>用所需的逻辑定义一个或多个初始化脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining and using a composite build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052657Z" creationid="pingfangx" creationdate="20220420T052657Z">
        <seg>定义和使用复合构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining and using a composite build to combine multiple independent builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052733Z" creationid="pingfangx" creationdate="20220420T052733Z">
        <seg>定义并使用复合构建来组合多个独立构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining the plugin as a source file under the buildSrc directory in the project (see &lt;a0&gt;Using buildSrc to extract functional logic&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070840Z" creationid="pingfangx" creationdate="20220420T070813Z">
        <seg>将插件定义为项目中 buildSrc 目录下的源文件(请参见 &lt;a0&gt;Using buildSrc to extract functional logic&lt;/a0&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Defining the plugin as an inline class declaration inside a build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070844Z" creationid="pingfangx" creationdate="20220420T070843Z">
        <seg>将插件定义为构建脚本中的内联类声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Designing Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062118Z" creationid="pingfangx" creationdate="20220420T062118Z">
        <seg>设计插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developers only need to point their checked-in &lt;a0&gt;Wrapper&lt;/a0&gt; files to the URL of the custom Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101930Z" creationid="pingfangx" creationdate="20220419T101551Z">
        <seg>开发人员只需将其签入的 &lt;a0&gt;Wrapper&lt;/a0&gt; 指向自定义 Gradle 分发的 URL 即可。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing Custom Gradle Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081716Z" creationid="pingfangx" creationdate="20220420T081716Z">
        <seg>开发自定义 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing Gradle Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062107Z" creationid="pingfangx" creationdate="20220420T062107Z">
        <seg>开发 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing Gradle Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062047Z" creationid="pingfangx" creationdate="20220420T061910Z">
        <seg>开发 Gradle 任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing Parallel Tasks</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062050Z" creationid="pingfangx" creationdate="20220420T062050Z">
        <seg>开发并行任务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing a Gradle plugin in a build without publishing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052804Z" creationid="pingfangx" creationdate="20220420T052743Z">
        <seg>在不发布的情况下在构建中开发 Gradle 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Developing project extensions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094123Z" creationid="pingfangx" creationdate="20220420T094123Z">
        <seg>开发项目扩展</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Downgrading and Excluding</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062847Z" creationid="pingfangx" creationdate="20220420T062847Z">
        <seg>降级和排除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Enabling and Configuring</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063241Z" creationid="pingfangx" creationdate="20220420T063241Z">
        <seg>启用和配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Encapsulates imperative logic and allows build scripts to be as declarative as possible</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064120Z" creationid="pingfangx" creationdate="20220420T064120Z">
        <seg>封装命令式逻辑，并允许构建脚本尽可能具有声明性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Even better - you can encapsulate the versions of external plugins by composing the build logic using your own &lt;a0&gt;convention plugins&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073523Z" creationid="pingfangx" creationdate="20220420T073438Z">
        <seg>更好的方案是，你可以通过使用自己的 &lt;a0&gt; 约定插件&lt;/a0&gt;组合构建逻辑来封装外部插件的版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Executing Multi-Project Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061343Z" creationid="pingfangx" creationdate="20220420T061343Z">
        <seg>执行多项目构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extend the Gradle model (e.g. add new DSL elements that can be configured)</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063926Z" creationid="pingfangx" creationdate="20220420T063924Z">
        <seg>扩展 Gradle 模型(例如，添加可配置的新 DSL 元素)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>External jars can be added to the build script classpath using the &lt;c0&gt;buildscript {}&lt;/c0&gt; block as described in &lt;a1&gt;External dependencies for the build script&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081436Z" creationid="pingfangx" creationdate="20220420T081348Z">
        <seg>外部 jar 可以使用 &lt;c0&gt;buildscript {}&lt;/c0&gt; 块添加到构建脚本 classpath 中，如 &lt;a1&gt;External dependencies for the build script&lt;/a1&gt; 中所述。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Extracting information from subprojects of a certain type.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055805Z" creationid="pingfangx" creationdate="20220408T055804Z">
        <seg>从特定类型的子项目中提取信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Filesystem locations are relative to the project directory, while remote script locations are specified with an HTTP URL.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064912Z" creationid="pingfangx" creationdate="20220420T064912Z">
        <seg>文件系统位置相对于项目目录，而远程脚本位置是用 HTTP URL 指定的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, apply the script plugin to the root project as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085956Z" creationid="pingfangx" creationdate="20220420T085953Z">
        <seg>最后，将脚本插件应用于根项目，如下所示：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finally, the Ivy repository at &lt;c2&gt;../ivy-repo&lt;/c2&gt; will be checked.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075147Z" creationid="pingfangx" creationdate="20220420T074700Z">
        <seg>最后，将在 &lt;c2&gt;../ivy-repo&lt;/c2&gt; 的 Ivy 仓库中查找。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Finding community plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064943Z" creationid="pingfangx" creationdate="20220420T064936Z">
        <seg>查找社区插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fine Tuning the Project Layout</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061640Z" creationid="pingfangx" creationdate="20220420T061640Z">
        <seg>精细调整项目布局</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First of all, you will have to communicate the setup process across all developers in the company.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101445Z" creationid="pingfangx" creationdate="20220419T101439Z">
        <seg>首先，你必须在公司的所有开发人员之间沟通安装过程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, it needs to &lt;e0&gt;resolve&lt;/e0&gt; the plugin, and then it needs to &lt;e1&gt;apply&lt;/e1&gt; the plugin to the target, usually a &lt;a2&gt;Project&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065350Z" creationid="pingfangx" creationdate="20220420T065331Z">
        <seg>首先，它需要 &lt;e0&gt;resolve (解析)&lt;/e0&gt; 插件，然后它需要 &lt;e1&gt;apply (应用)&lt;/e1&gt; 插件到目标上，目标通常是一个 &lt;a2&gt;Project&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, you need a &lt;c0&gt;buildSrc/build.gradle.kts&lt;/c0&gt; file that applies the &lt;c1&gt;kotlin-dsl&lt;/c1&gt; plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085602Z" creationid="pingfangx" creationdate="20220420T085541Z">
        <seg>首先，你需要一个 &lt;c0&gt;buildSrc/build.gradle.kts&lt;/c0&gt; 文件，应用 &lt;c1&gt;kotlin-dsl&lt;/c1&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>First, you need a &lt;c0&gt;buildSrc/build.gradle&lt;/c0&gt; file that applies the &lt;c1&gt;groovy-gradle-plugin&lt;/c1&gt; plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085611Z" creationid="pingfangx" creationdate="20220420T085531Z">
        <seg>首先，你需要一个 &lt;c0&gt;buildSrc/build.gradle&lt;/c0&gt; 文件，应用 &lt;c1&gt;groovy-gradle-plugin&lt;/c1&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Fixing Metadata</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062906Z" creationid="pingfangx" creationdate="20220420T062906Z">
        <seg>修复元数据</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Following Best Practices</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061853Z" creationid="pingfangx" creationdate="20220420T061853Z">
        <seg>遵循最佳实践</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For all intents and purposes, they are binary plugins and can be applied by plugin ID, tested and published as binary plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085241Z" creationid="pingfangx" creationdate="20220420T085206Z">
        <seg>对于所有意图和目的，它们是二进制插件，可以通过插件 id 应用、测试和发布为二进制插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For each of the example traits from the beginning of this section, we can write a plugin that encapsulates the logic common to the subproject of a given &lt;e1&gt;type&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T053114Z" creationid="pingfangx" creationdate="20220408T053048Z">
        <seg>对于本节开头的每个示例特征，我们可以编写一个插件，封装给定 &lt;e1&gt;类型&lt;/e1&gt; 的子项目通用的逻辑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example if you had a Github account named "foo" and your plugin was named "bar", a suitable plugin id might be &lt;c0&gt;com.github.foo.bar&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082932Z" creationid="pingfangx" creationdate="20220420T082919Z">
        <seg>例如，如果你有一个名为“foo”的 Github 帐户，并且你的插件名为“bar”，那么合适的插件 id 可能是 &lt;c0&gt;com.github.foo.bar&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example you may want to pass in a specific property value to control runtime behavior just for this one invocation of the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100706Z" creationid="pingfangx" creationdate="20220419T100637Z">
        <seg>例如，你可能希望传入一个特定的属性值，以便仅为单次构建控制运行时行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, a project applying the &lt;a0&gt;Java plugin&lt;/a0&gt; will automatically compile the code in the directory &lt;c1&gt;src/main/java&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091511Z" creationid="pingfangx" creationdate="20220419T091418Z">
        <seg>例如，应用 &lt;a0&gt;Java plugin&lt;/a0&gt; 的项目将自动编译在目录 &lt;c1&gt;src/main/java&lt;/c1&gt; 中的源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, several subprojects may contain &lt;e0&gt;code&lt;/e0&gt; in a particular programming language while another subproject may be dedicated for &lt;e1&gt;documentation&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T060357Z" creationid="pingfangx" creationdate="20220407T101444Z">
        <seg>例如，几个子项目可能包含特定编程语言中的 &lt;e0&gt;代码&lt;/e0&gt;，而另一个子项目可能专用于 &lt;e1&gt;文档&lt;/e1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the following complete sample from the &lt;c0&gt;sample-plugins&lt;/c0&gt; project shows how to publish a &lt;c1&gt;com.example.hello&lt;/c1&gt; plugin and a &lt;c2&gt;com.example.goodbye&lt;/c2&gt; plugin to both an Ivy and Maven repository using the combination of the &lt;a3&gt;java-gradle-plugin&lt;/a3&gt;, the &lt;a4&gt;maven-publish&lt;/a4&gt; plugin, and the &lt;a5&gt;ivy-publish&lt;/a5&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080536Z" creationid="pingfangx" creationdate="20220420T080412Z">
        <seg>例如，来自 &lt;c0&gt;sample-plugins&lt;/c0&gt; 项目的以下完整示例，显示了如何发布 &lt;c1&gt;com.example.hello&lt;/c1&gt; 插件和 &lt;c2&gt;com.example.goodbye&lt;/c2&gt; 插件到 Ivy 和 Maven 仓库，通过一起使用 &lt;a3&gt;java-gradle-plugin&lt;/a3&gt;，&lt;a4&gt;maven-publish&lt;/a4&gt; 插件，以及 &lt;a5&gt;ivy-publish&lt;/a5&gt; 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the script &lt;c0&gt;src/main/groovy/java-library-convention.gradle&lt;/c0&gt; would have a plugin ID of &lt;c1&gt;java-library-convention&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085622Z" creationid="pingfangx" creationdate="20220420T085620Z">
        <seg>例如，脚本 &lt;c0&gt;src/main/groovy/java-library-convention.gradle&lt;/c0&gt; 的插件 ID 为 &lt;c1&gt;java-library-convention&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, the script &lt;c0&gt;src/main/kotlin/java-library-convention.gradle.kts&lt;/c0&gt; would have a plugin ID of &lt;c1&gt;java-library-convention&lt;/c1&gt; (assuming it has no package declaration).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085700Z" creationid="pingfangx" creationdate="20220420T085655Z">
        <seg>例如，脚本 &lt;c0&gt;src/main/kotlin/java-library-convention.gradle.kts&lt;/c0&gt; 将具有 &lt;c1&gt;java-library-convention&lt;/c1&gt; 的插件 ID(假设它没有包声明)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For example, to declare a in-house repository and its credentials.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101424Z" creationid="pingfangx" creationdate="20220419T101423Z">
        <seg>例如，声明内部存储库及其凭据。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For instance, it might seem reasonable to add "gradle" as a component of your plugin id, but since plugin ids are only used for Gradle plugins, this would be superfluous.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083354Z" creationid="pingfangx" creationdate="20220420T083316Z">
        <seg>例如，添加“gradle”作为插件 id 的一个组件似乎是合理的，但由于插件 id 仅用于 gradle 插件，这将会很多余。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more details about included builds, see &lt;a5&gt;Composing Builds&lt;/a5&gt; chapter.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104250Z" creationid="pingfangx" creationdate="20220419T104236Z">
        <seg>有关 included build 的更多详细信息，请参阅 &lt;a5&gt;Composing Builds&lt;/a5&gt; 章节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more details on authoring custom Gradle plugins, consult the &lt;a0&gt;user manual&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104358Z" creationid="pingfangx" creationdate="20220419T104357Z">
        <seg>有关编写自定义 Gradle 插件的更多详细信息，请参阅 &lt;a0&gt;user manual&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information about &lt;c1&gt;buildSrc&lt;/c1&gt;, consult &lt;a2&gt;Using buildSrc to organize build logic&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T054117Z" creationid="pingfangx" creationdate="20220408T054057Z">
        <seg>有关 &lt;c1&gt;buildSrc&lt;/c1&gt; 的更多信息，请参阅 &lt;a2&gt;Using buildSrc to organize build logic&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information on publishing plugins to custom repositories read &lt;a1&gt;Gradle Plugin Development Plugin&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080157Z" creationid="pingfangx" creationdate="20220420T080123Z">
        <seg>有关将插件发布到自定义仓库的更多信息，请阅读 &lt;a1&gt;Gradle Plugin Development Plugin&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more information on the inner workings of plugins, see &lt;a0&gt;Custom Plugins&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065126Z" creationid="pingfangx" creationdate="20220420T065112Z">
        <seg>有关插件内部工作原理的更多信息，请参阅 &lt;a0&gt;Custom Plugins&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For more on defining your own plugins, see &lt;a0&gt;Custom Plugins&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070901Z" creationid="pingfangx" creationdate="20220420T070901Z">
        <seg>有关定义自己的插件的更多信息，请参阅 &lt;a0&gt;Custom Plugins&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For multi-project builds there can be only one &lt;c2&gt;buildSrc&lt;/c2&gt; directory, which has to sit in the root project directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095200Z" creationid="pingfangx" creationdate="20220419T095146Z">
        <seg>对于多项目构建，只能有一个 &lt;c2&gt;buildSrc&lt;/c2&gt; 目录，它必须位于根项目目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For that purpose, the runtime walks the hierarchy of the directory tree up to the root directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094118Z" creationid="pingfangx" creationdate="20220419T094117Z">
        <seg>为此，运行时将遍历目录树的层次结构，直至根目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>For this example let’s also say that we want to enforce that our libraries expose some documentation with a common structure.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105517Z" creationid="pingfangx" creationdate="20220419T105515Z">
        <seg>在这个例子中，我们还想强制要求我们的库公开一些具有公共结构的文档。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>From the use case above, we have identified that we have two types of projects - generic Java projects and public libraries.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105759Z" creationid="pingfangx" creationdate="20220419T105743Z">
        <seg>从上面的用例中，我们发现我们有两种类型的项目 - 通用 Java 项目和公共库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Furthermore, it is not necessary to append &lt;c0&gt;.class&lt;/c0&gt; to identify a class literal in Groovy as it is in Java.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081045Z" creationid="pingfangx" creationdate="20220420T080954Z">
        <seg>另外在 Groovy 中，不需要像在 Java 中一样添加 &lt;c0&gt;.class&lt;/c0&gt; 来标识的类字面量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Furthermore, one need to append the &lt;c0&gt;::class&lt;/c0&gt; suffix to identify a class literal in Kotlin instead of &lt;c1&gt;.class&lt;/c1&gt; in Java.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081249Z" creationid="pingfangx" creationdate="20220420T081053Z">
        <seg>另外在 Kotlin 中需要追加 &lt;c0&gt;::class&lt;/c0&gt; 后缀以识别类字面量，而不像在 java 中使用 &lt;c1&gt;.class&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Furthermore, updating the initialization script logic uniformly can prove challenging.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101449Z" creationid="pingfangx" creationdate="20220419T101448Z">
        <seg>此外，统一更新初始化脚本逻辑可能具有挑战性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Future versions of Gradle will remove this restriction.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072924Z" creationid="pingfangx" creationdate="20220420T072922Z">
        <seg>Gradle 的未来版本将取消此限制。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, a namespace that identifies ownership and a name are all that are needed for a good plugin id.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083500Z" creationid="pingfangx" creationdate="20220420T083407Z">
        <seg>通常，一个好的插件 id 只需要一个标识所有权名称空间和名字即可。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Generally, this JAR might include some plugins, or bundle several related task classes into a single library.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082532Z" creationid="pingfangx" creationdate="20220420T082517Z">
        <seg>通常，这个 JAR 可能包含一些插件，或者将几个相关的任务类打包到一个库中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Getting Started</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060933Z" creationid="pingfangx" creationdate="20220420T060933Z">
        <seg>入门</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle &amp; Third-party Tools</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063438Z" creationid="pingfangx" creationdate="20220420T063438Z">
        <seg>Gradle 和第三方工具</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle Enterprise</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060746Z" creationid="pingfangx" creationdate="20220420T060742Z">
        <seg>Gradle 企业</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle adds a configuration block for each extension object, so you can group settings together.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093701Z" creationid="pingfangx" creationdate="20220420T093651Z">
        <seg>Gradle 为每个扩展对象添加了一个配置块，因此你可以将设置分组在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle allows you to implement your own plugins, so you can reuse your build logic, and share it with others.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081910Z" creationid="pingfangx" creationdate="20220420T081901Z">
        <seg>Gradle 允许你实现自己的插件，这样就可以重用构建逻辑，并与其他人共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle at its core intentionally provides very little for real world automation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063627Z" creationid="pingfangx" creationdate="20220420T063553Z">
        <seg>Gradle 的核心为实际的自动化仅提供了很少的功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle has a vibrant community of plugin developers who contribute plugins for a wide variety of capabilities.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064947Z" creationid="pingfangx" creationdate="20220420T064947Z">
        <seg>Gradle 有一个充满活力的插件开发者社区，他们为各种各样的功能提供插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle on CI</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063418Z" creationid="pingfangx" creationdate="20220420T063409Z">
        <seg>CI 上的 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides a number of features that are helpful when developing Gradle types, including plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090332Z" creationid="pingfangx" creationdate="20220420T090319Z">
        <seg>Gradle 提供了许多有用的功能，在开发 Gradle 类型时有用，包括插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides some types that you can use in task implementations and extensions to help you with this.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094645Z" creationid="pingfangx" creationdate="20220420T094632Z">
        <seg>Gradle 提供了一些类型，你可以在任务实现和扩展中使用这些类型来帮助你实现这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle provides the core plugins (e.g. &lt;c1&gt;JavaPlugin&lt;/c1&gt;) as part of its distribution which means they are automatically resolved.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070456Z" creationid="pingfangx" creationdate="20220420T070433Z">
        <seg>Gradle 提供核心插件(例如，&lt;c1&gt;JavaPlugin&lt;/c1&gt;)作为其分发的一部分，这意味着它们会自动解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle recommends that you place sources in directories according to their language, because builds are more performant and both the user and build can make stronger assumptions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091717Z" creationid="pingfangx" creationdate="20220419T091650Z">
        <seg>Gradle 建议你根据源代码的语言将其放在相应目录中，这样构建的性能更高，用户和构建都可以做出更有力的假设。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle tries to locate a &lt;c0&gt;settings.gradle&lt;/c0&gt; (Groovy DSL) or a &lt;c1&gt;settings.gradle.kts&lt;/c1&gt; (Kotlin DSL) file with every invocation of the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094114Z" creationid="pingfangx" creationdate="20220419T094017Z">
        <seg>Gradle 的每次构建调用都会尝试寻找 &lt;c0&gt;settings.gradle&lt;/c0&gt;(Groovy DSL)或 &lt;c1&gt;settings.gradle.kts&lt;/c1&gt;(Kotlin DSL)文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle will take care of compiling and testing the plugin and making it available on the classpath of the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082256Z" creationid="pingfangx" creationdate="20220420T082255Z">
        <seg>Gradle 将负责编译和测试插件，并使其在构建脚本的类路径上可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle-managed Directories</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061451Z" creationid="pingfangx" creationdate="20220420T061445Z">
        <seg>Gradle 管理的目录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle’s language plugins establish conventions for discovering and compiling source code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091409Z" creationid="pingfangx" creationdate="20220419T091353Z">
        <seg>Gradle 的语言插件建立了查找和编译源代码的规范。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Gradle’s recommended way of organizing build logic is to use its plugin system.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052651Z" creationid="pingfangx" creationdate="20220408T052647Z">
        <seg>Gradle 推荐的组织构建逻辑的方法是使用其插件系统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy DSL precompiled script plugins are available starting with Gradle 6.4.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085339Z" creationid="pingfangx" creationdate="20220420T085330Z">
        <seg>Groovy DSL 预编译脚本插件从 Gradle 6.4 开始可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy DSL precompiled script plugins can be applied in projects that use Gradle 5.0 and later.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085344Z" creationid="pingfangx" creationdate="20220420T085342Z">
        <seg>Groovy DSL 预编译脚本插件可以应用于使用 Gradle 5.0 及更高版本的项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Groovy Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062538Z" creationid="pingfangx" creationdate="20220420T062538Z">
        <seg>Groovy 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Changing Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062810Z" creationid="pingfangx" creationdate="20220420T062723Z">
        <seg>处理变更中版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Handling Mutually Exclusive Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062903Z" creationid="pingfangx" creationdate="20220420T062900Z">
        <seg>处理互斥依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have a look at the &lt;a0&gt;sample that demonstrates a multi-project build that models the build logic using convention plugins&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093746Z" creationid="pingfangx" creationdate="20220408T054624Z">
        <seg>看一下 &lt;a0&gt;示例&lt;/a0&gt;，其演示了一个多项目使用约定插件管理构建逻辑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Have a look at the &lt;a0&gt;sample&lt;/a0&gt; that demonstrates how a separate integration tests configuration can be added to a Java-based project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T092510Z" creationid="pingfangx" creationdate="20220419T092447Z">
        <seg>可以看下 &lt;a0&gt;例子&lt;/a0&gt;，它演示了如何将单独的集成测试配置添加到基于 Java 的项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here is a simple build script for the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084549Z" creationid="pingfangx" creationdate="20220420T084549Z">
        <seg>下面是该项目的一个简单构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Here we add a &lt;c0&gt;greeting&lt;/c0&gt; extension object to the project, which allows you to configure the greeting.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092536Z" creationid="pingfangx" creationdate="20220420T092526Z">
        <seg>在这里，我们向项目添加了一个 &lt;c0&gt;greeting&lt;/c0&gt; 扩展对象，它允许你配置问候语。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, it is not visible outside the build, and so you cannot reuse the plugin outside the build it is defined in.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082328Z" creationid="pingfangx" creationdate="20220420T082328Z">
        <seg>但是，它在构建外部不可见，因此不能在定义插件的构建外部重用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, non-core binary plugins need to be resolved before they can be applied.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070459Z" creationid="pingfangx" creationdate="20220420T070459Z">
        <seg>然而，在应用非核心二进制插件之前，需要对其进行解析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>However, the plugin is not visible outside the build script, and so you cannot reuse the plugin outside the build script it is defined in.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082133Z" creationid="pingfangx" creationdate="20220420T082131Z">
        <seg>但是，插件在构建脚本之外是不可见的，因此不能在定义插件的构建脚本之外重用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If the restrictions of the &lt;c0&gt;plugins {}&lt;/c0&gt; block are prohibitive, the recommended approach is to apply plugins using the &lt;a1&gt;buildscript {} block&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073129Z" creationid="pingfangx" creationdate="20220420T073104Z">
        <seg>如果 &lt;c0&gt;plugins {}&lt;/c0&gt; 块的限制是禁止的，建议使用 &lt;a1&gt;buildscript {} 块&lt;/a1&gt; 应用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are interested in publishing your plugin to be used by the wider Gradle community, you can publish it to the &lt;a0&gt;Gradle Plugin Portal&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084251Z" creationid="pingfangx" creationdate="20220420T084239Z">
        <seg>如果你有兴趣发布你的插件供更广泛的 Gradle 社区使用，你可以将其发布到 &lt;a0&gt;Gradle Plugin Portal&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you are publishing your plugin internally for use within your organization, you can publish it like any other code artifact.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084221Z" creationid="pingfangx" creationdate="20220420T084212Z">
        <seg>如果你在内部发布插件以供组织内部使用，则可以像其他任何代码库一样发布它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you don’t want the Gradle Plugin Portal to be searched, omit the &lt;c1&gt;gradlePluginPortal()&lt;/c1&gt; line.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075141Z" creationid="pingfangx" creationdate="20220420T074644Z">
        <seg>如果不想搜索 Gradle Plugin Portal，可以省略 &lt;c1&gt;gradlePluginPortal()&lt;/c1&gt; 这一行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If you have a &lt;a0&gt;multi-project build&lt;/a0&gt;, you probably want to apply plugins to some or all of the subprojects in your build, but not to the &lt;c1&gt;root&lt;/c1&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073215Z" creationid="pingfangx" creationdate="20220420T073137Z">
        <seg>如果你有一个 &lt;a0&gt;多项目构建&lt;/a0&gt;，那么你可能希望将插件应用于构建中的部分或所有子项目，而不是应用于 &lt;c1&gt;根&lt;/c1&gt; 项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>If your plugin was published without using the &lt;a0&gt;Java Gradle Plugin Development Plugin&lt;/a0&gt;, the publication will be lacking &lt;a1&gt;Plugin Marker Artifact&lt;/a1&gt;, which is needed for &lt;a2&gt;plugins DSL&lt;/a2&gt; to locate the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084845Z" creationid="pingfangx" creationdate="20220420T084809Z">
        <seg>如果你的插件发布时没有使用 &lt;a0&gt;Java Gradle Plugin Development Plugin&lt;/a0&gt;，那么发布产物将缺少 &lt;a1&gt;Plugin Marker Artifact&lt;/a1&gt;，这是 &lt;a2&gt;plugins DSL&lt;/a2&gt; 定位插件所需要的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implement logic for downloading and repackaging a Gradle distribution.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101823Z" creationid="pingfangx" creationdate="20220419T101806Z">
        <seg>实现下载和重新打包 Gradle 分发的逻辑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Implementing Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062121Z" creationid="pingfangx" creationdate="20220420T062121Z">
        <seg>实现插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Improving Performance of Gradle Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063231Z" creationid="pingfangx" creationdate="20220420T063231Z">
        <seg>提高 Gradle 构建的性能</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In Gradle, properties can be defined in the build script, in a &lt;c0&gt;gradle.properties&lt;/c0&gt; file or as parameters on the command line.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100545Z" creationid="pingfangx" creationdate="20220419T100515Z">
        <seg>在 Gradle 中，属性可以在构建脚本中、&lt;c0&gt;gradle.properties&lt;/c0&gt; 文件中或作为命令行上的参数声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In addition to plugins written as standalone projects, Gradle also allows you to provide build logic written in either Groovy or Kotlin DSLs as precompiled script plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085031Z" creationid="pingfangx" creationdate="20220420T085010Z">
        <seg>除了作为独立项目编写的插件外，Gradle 还允许你提供以 Groovy 或 Kotlin DSL 编写的构建逻辑作为预编译脚本插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, &lt;a1&gt;Gradle core plugins&lt;/a1&gt; are modeled in the same way - for example, the &lt;a2&gt;Java Plugin&lt;/a2&gt; configures a generic &lt;c3&gt;java&lt;/c3&gt; project, while &lt;a4&gt;Java Library Plugin&lt;/a4&gt; internally applies the &lt;a5&gt;Java Plugin&lt;/a5&gt; and configures aspects specific to a Java library in addition.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052821Z" creationid="pingfangx" creationdate="20220408T052720Z">
        <seg>实际上，&lt;a1&gt;Gradle 核心插件&lt;/a1&gt; 是以同样的方式建模的 - 例如，&lt;a2&gt;Java Plugin&lt;/a2&gt; 配置一个通用的 &lt;c3&gt;java&lt;/c3&gt; 项目，而 &lt;a4&gt;Java Library Plugin&lt;/a4&gt; 在内部应用 &lt;a5&gt;Java Plugin&lt;/a5&gt;，并配置特定于 Java 库的方面。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In fact, the plugin metadata for them is generated using the &lt;a0&gt;Gradle Plugin Development Plugin&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085245Z" creationid="pingfangx" creationdate="20220420T085244Z">
        <seg>实际上，它们的插件元数据是使用 &lt;a0&gt;Gradle Plugin Development Plugin&lt;/a0&gt; 生成的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In general, a plugin implemented using Java or Kotlin, which are statically typed, will perform better than the same plugin implemented using Groovy.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082046Z" creationid="pingfangx" creationdate="20220420T082001Z">
        <seg>一般来说，使用静态类型的 Java 或 Kotlin 语言实现的插件，比使用 Groovy 实现的插件性能更好。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order for precompiled script plugins to be discovered, the &lt;c0&gt;buildSrc&lt;/c0&gt; project needs to apply the &lt;c1&gt;groovy-gradle-plugin&lt;/c1&gt; plugin in its &lt;c2&gt;build.gradle&lt;/c2&gt; file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110602Z" creationid="pingfangx" creationdate="20220419T110524Z">
        <seg>为了可以发现预编译脚本插件，&lt;c0&gt;buildSrc&lt;/c0&gt; 项目需要在其 &lt;c2&gt;build.gradle&lt;/c2&gt; 文件中应用 &lt;c1&gt;groovy-gradle-plugin&lt;/c1&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order for precompiled script plugins to be discovered, the &lt;c0&gt;buildSrc&lt;/c0&gt; project needs to apply the &lt;c1&gt;kotlin-dsl&lt;/c1&gt; plugin in its &lt;c2&gt;build.gradle.kts&lt;/c2&gt; file:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110701Z" creationid="pingfangx" creationdate="20220419T110620Z">
        <seg>为了可以发现预编译脚本插件，&lt;c0&gt;buildSrc&lt;/c0&gt; 项目需要在其 &lt;c2&gt;build.gradle.kts&lt;/c2&gt; 文件中应用 &lt;c1&gt;kotlin-dsl&lt;/c1&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In order to apply an external plugin in a precompiled script plugin, it has to be added to the plugin project’s implementation classpath in the plugin’s build file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090150Z" creationid="pingfangx" creationdate="20220420T090022Z">
        <seg>为了在预编译脚本插件中应用外部插件，必须将外部插件添加到插件的构建文件中的插件项目的 implementation 类路径中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In our examples, we are going to use Java as the implementation language for standalone plugin project and Groovy or Kotlin in the buildscript plugin examples.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081953Z" creationid="pingfangx" creationdate="20220420T081937Z">
        <seg>在我们的示例中，我们将使用 Java 作为独立插件项目的实现语言，在 buildscript 插件示例中使用 Groovy 或 Kotlin。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In our examples, we will start with the plugin in the build script, to keep things simple.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082549Z" creationid="pingfangx" creationdate="20220420T082547Z">
        <seg>在我们的示例中，我们将从构建脚本中的插件开始，以保持简单。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the above case, we are using the short name ‘&lt;c1&gt;java&lt;/c1&gt;’ to apply the &lt;a2&gt;JavaPlugin&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080739Z" creationid="pingfangx" creationdate="20220420T080738Z">
        <seg>在上面的例子中，我们使用短名称“&lt;c1&gt;java&lt;/c1&gt;”来应用 &lt;a2&gt;JavaPlugin&lt;/a2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In the long run, cross configuration usually grows complex with more and more conditional logic and a higher maintenance burden.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055302Z" creationid="pingfangx" creationdate="20220408T055240Z">
        <seg>从长远来看，跨项目配置通常会变得越来越复杂，有越来越多的条件逻辑和更高的维护成本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case we want to apply a common set of rules to all of them, such as source directory layout, compiler flags, code style conventions, code quality checks and so on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105343Z" creationid="pingfangx" creationdate="20220419T105300Z">
        <seg>在这种情况下，我们希望将一组公共规则应用于所有这些项目，例如源目录布局、编译器标志、代码样式规范、代码质量检查等等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this case, the recommended way to resolve the plugin in another project is to add a &lt;c3&gt;resolutionStrategy&lt;/c3&gt; section to the &lt;c4&gt;pluginManagement {}&lt;/c4&gt; block of the project’s settings file as shown below.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084921Z" creationid="pingfangx" creationdate="20220420T084849Z">
        <seg>在这种情况下，推荐的在另一个项目中解析插件的方法是在项目 settings 文件的 &lt;c4&gt;pluginManagement {}&lt;/c4&gt; 块中添加 &lt;c3&gt;resolutionStrategy&lt;/c3&gt; 部分，如下所示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this chapter we discuss how to use plugins and the terminology and concepts surrounding plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063836Z" creationid="pingfangx" creationdate="20220420T063836Z">
        <seg>在本章中，我们将讨论如何使用插件以及与插件相关的术语和概念。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, &lt;c0&gt;GreetingPluginExtension&lt;/c0&gt; is an object with a property called &lt;c1&gt;message&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093559Z" creationid="pingfangx" creationdate="20220420T093558Z">
        <seg>在本例中，&lt;c0&gt;GreetingPluginExtension&lt;/c0&gt; 是一个具有名为 &lt;c1&gt;message&lt;/c1&gt; 的属性的对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, several settings can be grouped together within the &lt;c0&gt;configure&lt;GreetingPluginExtension&gt;&lt;/c0&gt; block.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093856Z" creationid="pingfangx" creationdate="20220420T093855Z">
        <seg>在本例中，可以在 &lt;c0&gt;configure&lt;GreetingPluginExtension&gt;&lt;/c0&gt; 块中将多个设置组合在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, several settings can be grouped together within the &lt;c0&gt;greeting&lt;/c0&gt; closure.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093747Z" creationid="pingfangx" creationdate="20220420T093739Z">
        <seg>在本例中，可以在 &lt;c0&gt;greeting&lt;/c0&gt; 闭包中将多个设置组合在一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this example, we configure the &lt;c0&gt;greet&lt;/c0&gt; task &lt;c1&gt;destination&lt;/c1&gt; property as a closure/provider, which is evaluated with the &lt;a2&gt;Project.file(java.lang.Object)&lt;/a2&gt; method to turn the return value of the closure/provider into a &lt;c3&gt;File&lt;/c3&gt; object at the last minute.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094413Z" creationid="pingfangx" creationdate="20220420T094328Z">
        <seg>在本例中，我们将 &lt;c0&gt;greet&lt;/c0&gt; 任务的 &lt;c1&gt;destination&lt;/c1&gt; 属性配置为闭包/提供者，并使用 &lt;a2&gt;Project.file(java.lang.Object)&lt;/a2&gt; 方法，在最后一刻将闭包/提供程序的返回值转换为 &lt;c3&gt;File&lt;/c3&gt; 对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this sample, &lt;c0&gt;myproject.library-conventions&lt;/c0&gt; plugin uses a custom task class from &lt;c1&gt;buildSrc/src/main/java&lt;/c1&gt; to configure library README checks:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T031532Z" creationid="pingfangx" creationdate="20220420T031507Z">
        <seg>在此示例中，&lt;c0&gt;myproject.library-conventions&lt;/c0&gt; 插件使用来自 &lt;c1&gt;buildSrc/src/main/java&lt;/c1&gt; 的自定义任务类来配置库的 README 检查：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this sample, convention plugins are implemented as &lt;a0&gt;precompiled script plugins&lt;/a0&gt; - this is the simplest way to start out as you can use one of Gradle’s DSLs directly to implement the build logic, just as if the plugin was a regular build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110519Z" creationid="pingfangx" creationdate="20220419T110417Z">
        <seg>在这个示例中，约定插件被实现为 &lt;a0&gt;预编译脚本插件&lt;/a0&gt; - 这是最简单的开始方式，因为你可以直接使用 Gradle 的 DSL 来实现构建逻辑，就像插件是一个常规构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In this way, using an extension object &lt;e0&gt;extends&lt;/e0&gt; the Gradle DSL to add a project property and DSL block for the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093944Z" creationid="pingfangx" creationdate="20220420T093943Z">
        <seg>通过这种方式，使用扩展对象 &lt;e0&gt;extends (扩展)&lt;/e0&gt;Gradle DSL，为插件添加项目属性和 DSL 块。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>In turn, these filesystem changes may prevent Gradle’s &lt;a0&gt;build cache&lt;/a0&gt; from properly identifying and caching what would otherwise be cacheable tasks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101251Z" creationid="pingfangx" creationdate="20220419T101230Z">
        <seg>反过来，这些文件系统更改可能会阻止 Gradle 的 &lt;a0&gt;构建缓存&lt;/a0&gt; 正确识别和缓存原本可以缓存的任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Including the plugin from an external jar defined as a buildscript dependency (see &lt;a0&gt;Applying plugins using the buildscript block&lt;/a0&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070804Z" creationid="pingfangx" creationdate="20220420T070654Z">
        <seg>从定义为 buildscript dependency 的外部 jar 的引入插件(请参阅 &lt;a0&gt;Applying plugins using the buildscript block&lt;/a0&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Including the plugin from the plugin portal or a &lt;a0&gt;custom repository&lt;/a0&gt; using the plugins DSL (see &lt;a1&gt;Applying plugins using the plugins DSL&lt;/a1&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070646Z" creationid="pingfangx" creationdate="20220420T070523Z">
        <seg>使用 plugins DSL，从  plugin portal 或&lt;a0&gt;自定义仓库&lt;/a0&gt;引入插件(请参见 &lt;a1&gt;Applying plugins using the plugins DSL&lt;/a1&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Inspecting Gradle Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063322Z" creationid="pingfangx" creationdate="20220420T063321Z">
        <seg>检查 Gradle 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Installing Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060941Z" creationid="pingfangx" creationdate="20220420T060940Z">
        <seg>安装 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Intermingling or overwriting output files produced by different tasks compromises up-to-date checking causing slower builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101144Z" creationid="pingfangx" creationdate="20220419T101059Z">
        <seg>混合或覆盖由不同任务生成的输出文件会影响 up-to-date 检查，从而导致生成速度变慢。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060719Z" creationid="pingfangx" creationdate="20220420T060719Z">
        <seg>介绍</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also provides direct access to the Gradle API.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095436Z" creationid="pingfangx" creationdate="20220419T095435Z">
        <seg>它还提供了对 Gradle API 的直接访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It also requires that the definition of plugins to use be somewhat static.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071827Z" creationid="pingfangx" creationdate="20220420T071826Z">
        <seg>它还要求使用的插件的定义是静态的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It applies &lt;c1&gt;java-library&lt;/c1&gt; and &lt;c2&gt;maven-publish&lt;/c2&gt; plugins as well as the &lt;c3&gt;myproject.java-conventions&lt;/c3&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110000Z" creationid="pingfangx" creationdate="20220419T105959Z">
        <seg>它应用了 &lt;c1&gt;java-library&lt;/c1&gt; 和 &lt;c2&gt;maven-publish&lt;/c2&gt; 插件以及 &lt;c3&gt;myproject.java-conventions&lt;/c3&gt; 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It applies the core &lt;c1&gt;java&lt;/c1&gt; and &lt;c2&gt;checkstyle&lt;/c2&gt; plugins as well as an external &lt;c3&gt;com.github.spotbugs&lt;/c3&gt; plugin, configures common compiler options as well as code quality checks.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105918Z" creationid="pingfangx" creationdate="20220419T105917Z">
        <seg>它应用了核心 &lt;c1&gt;java&lt;/c1&gt; 和 &lt;c2&gt;checkstyle&lt;/c2&gt; 插件以及外部 &lt;c3&gt;com.github.spotbugs&lt;/c3&gt; 插件，配置常见的编译器选项以及代码质量检查。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It can do things such as:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063911Z" creationid="pingfangx" creationdate="20220420T063911Z">
        <seg>它可以做以下事情：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It can then be applied in the precompiled script plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090202Z" creationid="pingfangx" creationdate="20220420T090202Z">
        <seg>然后可以将其应用到预编译脚本插件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It cannot be nested inside another construct (e.g. an if-statement or for-loop).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072820Z" creationid="pingfangx" creationdate="20220420T072800Z">
        <seg>它不能嵌套在另一个结构内(例如 if 语句或 for 循环)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It cannot be used in script plugins or init scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072916Z" creationid="pingfangx" creationdate="20220420T072911Z">
        <seg>它不能用于脚本插件或 init 脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It defines the directory &lt;c0&gt;src/main/java&lt;/c0&gt; as the default source directory for compilation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093341Z" creationid="pingfangx" creationdate="20220419T093341Z">
        <seg>它将目录 &lt;c0&gt;src/main/java&lt;/c0&gt; 定义为编译的默认源目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is also applied in the subprojects of the root project:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104321Z" creationid="pingfangx" creationdate="20220419T104321Z">
        <seg>它也适用于根项目的子项目：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is constrained, in order to be idempotent (produce the same result every time) and side effect free (safe for Gradle to execute at any time).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072057Z" creationid="pingfangx" creationdate="20220420T072038Z">
        <seg>它受到限制，以便幂等(每次产生相同的结果)和无副作用(Gradle 可以在任何时候安全地执行)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is documented here in case a build author cannot use the plugins DSL due to restrictions in how it currently works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080724Z" creationid="pingfangx" creationdate="20220420T080707Z">
        <seg>如果构建作者由于当前工作方式的限制而无法使用 plugins DSL，本文将对此进行说明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It is very convenient to use &lt;c0&gt;buildSrc&lt;/c0&gt; for that purpose as long as the code does not need to be shared among multiple, independent projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095055Z" creationid="pingfangx" creationdate="20220419T095027Z">
        <seg>如果代码不需要在多个独立的项目之间共享，则可以非常方便地使用 &lt;c0&gt;buildSrc&lt;/c0&gt; 来实现该目的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It works with the &lt;a0&gt;Gradle plugin portal&lt;/a0&gt; to provide easy access to both core and community plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071500Z" creationid="pingfangx" creationdate="20220420T071442Z">
        <seg>它与 &lt;a0&gt;Gradle plugin portal&lt;/a0&gt; 配合使用，提供对核心插件和社区插件的轻松访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s a good location for placing &lt;a1&gt;properties that control the build environment&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100903Z" creationid="pingfangx" creationdate="20220419T100816Z">
        <seg>&lt;a1&gt;控制构建环境的属性&lt;/a1&gt;最好就放在该文件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s common to declare properties on the command line for ad-hoc scenarios.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100628Z" creationid="pingfangx" creationdate="20220419T100550Z">
        <seg>对于特殊场景，在命令行上声明属性是很常见的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>It’s very common that a project defines and executes different types of tests e.g. unit tests, integration tests, functional tests or smoke tests.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T092038Z" creationid="pingfangx" creationdate="20220419T092017Z">
        <seg>一个项目通常会定义并执行不同类型的测试，例如单元测试、集成测试、功能测试或冒烟测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Ivy Publish Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063217Z" creationid="pingfangx" creationdate="20220420T063205Z">
        <seg>Ivy 发布插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>JVM Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062523Z" creationid="pingfangx" creationdate="20220420T062523Z">
        <seg>JVM 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java Application Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062533Z" creationid="pingfangx" creationdate="20220420T062529Z">
        <seg>Java 应用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java Library Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062526Z" creationid="pingfangx" creationdate="20220420T062526Z">
        <seg>Java 库插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java Platform Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062534Z" creationid="pingfangx" creationdate="20220420T062534Z">
        <seg>Java 平台插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Java source files live in &lt;c0&gt;src/main/java&lt;/c0&gt;, whereas Kotlin source files live in &lt;c1&gt;src/main/kotlin&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091728Z" creationid="pingfangx" creationdate="20220419T091728Z">
        <seg>Java 源文件位于 &lt;c0&gt;src/main/java&lt;/c0&gt; 中，而 Kotlin 源文件位于 &lt;c1&gt;src/main/kotlin&lt;/c1&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Kotlin DSL precompiled script plugins built with Gradle 6.0 cannot be used with earlier versions of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085316Z" creationid="pingfangx" creationdate="20220420T085315Z">
        <seg>使用 Gradle 6.0 构建的 Kotlin DSL 预编译脚本插件不能用于 Gradle 的早期版本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learning Basic Concepts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063254Z" creationid="pingfangx" creationdate="20220420T063252Z">
        <seg>学习基本概念</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learning More About Build Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061500Z" creationid="pingfangx" creationdate="20220420T061459Z">
        <seg>了解有关构建脚本的更多信息</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Learning the Basics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061426Z" creationid="pingfangx" creationdate="20220420T061426Z">
        <seg>学习基础知识</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Legacy Plugin Application</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071259Z" creationid="pingfangx" creationdate="20220420T071249Z">
        <seg>旧版插件应用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let’s add a simple extension object to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092519Z" creationid="pingfangx" creationdate="20220420T092511Z">
        <seg>让我们向项目添加一个简单的扩展对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let’s say that all our projects will be Java projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105249Z" creationid="pingfangx" creationdate="20220419T105248Z">
        <seg>假设我们所有的项目都是 Java 项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let’s take the &lt;a1&gt;Java plugin&lt;/a1&gt; as an example.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093319Z" creationid="pingfangx" creationdate="20220419T093318Z">
        <seg>让我们以 &lt;a1&gt;Java plugin&lt;/a1&gt; 为例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Let’s use the following project structure:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T103830Z" creationid="pingfangx" creationdate="20220419T103829Z">
        <seg>让我们使用以下项目结构：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, &lt;c2&gt;src/main/groovy/my.java-library-convention.gradle&lt;/c2&gt; would result in a plugin ID of &lt;c3&gt;my.java-library-convention&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085651Z" creationid="pingfangx" creationdate="20220420T085630Z">
        <seg>同样，&lt;c2&gt;src/main/groovy/my.java-library-convention.gradle&lt;/c2&gt; 将产生 &lt;c3&gt;my.java-library-convention&lt;/c3&gt; 的插件 ID。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Likewise, &lt;c2&gt;src/main/kotlin/my/java-library-convention.gradle.kts&lt;/c2&gt; would result in a plugin ID of &lt;c3&gt;my.java-library-convention&lt;/c3&gt; as long as it has a package declaration of &lt;c4&gt;my&lt;/c4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085800Z" creationid="pingfangx" creationdate="20220420T085715Z">
        <seg>同样地，如果它有一个包声明 &lt;c4&gt;my&lt;/c4&gt;，则 &lt;c2&gt;src/main/kotlin/my/java-library-convention.gradle.kts&lt;/c2&gt; 将产生 &lt;c3&gt;my.java-library-convention&lt;/c3&gt; 的插件 ID。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Limitations of the plugins DSL</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070951Z" creationid="pingfangx" creationdate="20220420T070943Z">
        <seg>plugins DSL 的限制</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Locations of binary plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070413Z" creationid="pingfangx" creationdate="20220420T070413Z">
        <seg>二进制插件的位置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Locking Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062812Z" creationid="pingfangx" creationdate="20220420T062812Z">
        <seg>锁定版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Logging sensitive information (e.g. credentials, tokens, certain environment variables) is &lt;a0&gt;considered a security vulnerability&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090452Z" creationid="pingfangx" creationdate="20220420T090423Z">
        <seg>记录敏感信息(例如凭据，令牌，某些环境变量)被 &lt;a0&gt;视为安全漏洞&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Making the plugin configurable</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081732Z" creationid="pingfangx" creationdate="20220420T081731Z">
        <seg>使插件可配置</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Managing Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062512Z" creationid="pingfangx" creationdate="20220420T062509Z">
        <seg>管理依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Mapping extension properties to task properties</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081743Z" creationid="pingfangx" creationdate="20220420T081742Z">
        <seg>将扩展属性映射到任务属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Maven Publish Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063210Z" creationid="pingfangx" creationdate="20220420T063158Z">
        <seg>Maven 发布插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>May contain any alphanumeric character, '.', and '-'.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083043Z" creationid="pingfangx" creationdate="20220420T083000Z">
        <seg>可以包含任何字母数字字符，“.”和“-”。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Migrating to Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061028Z" creationid="pingfangx" creationdate="20220420T061021Z">
        <seg>迁移到 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Modeling Feature Variants and Optional Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063025Z" creationid="pingfangx" creationdate="20220420T063004Z">
        <seg>建模功能变体和可选依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More details</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081802Z" creationid="pingfangx" creationdate="20220420T081802Z">
        <seg>更多细节</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>More on plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065022Z" creationid="pingfangx" creationdate="20220420T065022Z">
        <seg>更多关于插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Most plugins offer some configuration options for build scripts and other plugins to use to customize how the plugin works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092141Z" creationid="pingfangx" creationdate="20220420T092141Z">
        <seg>大多数插件为构建脚本和其他插件提供一些配置选项，用于自定义插件的工作方式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Multiple script plugins (of either form) can be applied to a given target.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064926Z" creationid="pingfangx" creationdate="20220420T064926Z">
        <seg>可以将多个脚本插件(任意一种形式)应用于给定的目标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Must contain at least one '.' character separating the namespace from the name of the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T083110Z" creationid="pingfangx" creationdate="20220420T083049Z">
        <seg>必须至少包含一个“.”字符，以将名称空间与插件名称分隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, create a new &lt;c0&gt;java-library-convention.gradle.kts&lt;/c0&gt; file in the &lt;c1&gt;buildSrc/src/main/kotlin&lt;/c1&gt; directory and set its contents to the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085907Z" creationid="pingfangx" creationdate="20220420T085904Z">
        <seg>接下来，在 &lt;c1&gt;buildSrc/src/main/kotlin&lt;/c1&gt; 目录中创建一个新的 &lt;c0&gt;java-library-convention.gradle.kts&lt;/c0&gt; 文件，并将其内容设置为以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Next, create a new &lt;c0&gt;java-library-convention.gradle&lt;/c0&gt; file in the &lt;c1&gt;buildSrc/src/main/groovy&lt;/c1&gt; directory and set its contents to the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085855Z" creationid="pingfangx" creationdate="20220420T085849Z">
        <seg>接下来，在 &lt;c1&gt;buildSrc/src/main/groovy&lt;/c1&gt; 目录中创建一个新的 &lt;c0&gt;java-library-convention.gradle&lt;/c0&gt; 文件，并将其内容设置为以下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>No other statements are allowed; their presence will cause a compilation error.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072432Z" creationid="pingfangx" creationdate="20220420T072420Z">
        <seg>不允许有其他语句；如果有将导致编译错误。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note for plugins published without &lt;c0&gt;java-gradle-plugin&lt;/c0&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084732Z" creationid="pingfangx" creationdate="20220420T084707Z">
        <seg>没有使用 &lt;c0&gt;java-gradle-plugin&lt;/c0&gt; 的插件注意事项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note how applying a convention plugin to a subproject effectively declares its type.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110131Z" creationid="pingfangx" creationdate="20220419T110131Z">
        <seg>注意将约定插件应用于子项目如何有效地声明其类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Note that this will actually apply the plugins to the main project, i.e. the one that applies the precompiled script plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085946Z" creationid="pingfangx" creationdate="20220420T085945Z">
        <seg>请注意，这实际上会将插件应用于主项目，即应用预编译脚本插件的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Notice that the properties filename matches the plugin id and is placed in the resources folder, and that the &lt;c0&gt;implementation-class&lt;/c0&gt; property identifies the &lt;a1&gt;Plugin&lt;/a1&gt; implementation class.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091431Z" creationid="pingfangx" creationdate="20220420T091401Z">
        <seg>请注意，properties 文件名与插件 id 匹配，并放在 resources 文件夹中，&lt;c0&gt;implementation-class&lt;/c0&gt; 属性标识了 &lt;a1&gt;Plugin&lt;/a1&gt; 实现类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Now we will move our plugin to a standalone project so that we can publish it and share it with others.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084441Z" creationid="pingfangx" creationdate="20220420T084441Z">
        <seg>现在我们将把我们的插件转移到一个独立的项目中，这样我们就可以发布它并与其他人共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often enterprises want to standardize the build platform for all projects in the organization by defining common conventions or rules.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101402Z" creationid="pingfangx" creationdate="20220419T101340Z">
        <seg>通常，企业常常通过定义通用的约定或规则来规范组织中所有项目的构建平台。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Often the cross-configuration section will do &lt;c0&gt;if subproject is of type X, then configure Y&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055745Z" creationid="pingfangx" creationdate="20220408T055723Z">
        <seg>通常跨项目配置部分将执行 &lt;c0&gt;if subproject is of type X, then configure Y&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Oftentimes, you have several related properties you need to specify on a single plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093647Z" creationid="pingfangx" creationdate="20220420T093642Z">
        <seg>通常，你需要在一个插件上指定几个相关属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once a plugin is resolved, its API can be used in a build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065525Z" creationid="pingfangx" creationdate="20220420T065515Z">
        <seg>一旦插件被解析，它的 API 就可以在构建脚本中使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Once the dependency is added, the external plugin can be applied in precompiled script plugin by id:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T023009Z" creationid="pingfangx" creationdate="20220420T023009Z">
        <seg>添加依赖项后，可以通过 id 在预编译脚本插件中应用外部插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One benefit of setting plugin versions this way is that the &lt;c0&gt;pluginManagement.plugins {}&lt;/c0&gt; does not have the same &lt;a1&gt;constrained syntax&lt;/a1&gt; as the build script &lt;c2&gt;plugins {}&lt;/c2&gt; block.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075455Z" creationid="pingfangx" creationdate="20220420T075345Z">
        <seg>以这种方式设置插件版本的一个好处是 &lt;c0&gt;pluginManagement.plugins {}&lt;/c0&gt;，没有和构建脚本 &lt;c2&gt;plugins {}&lt;/c2&gt; 块相同的 &lt;a1&gt;constrained syntax&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>One thing to note is that a new instance of a plugin is created for each project it is applied to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091935Z" creationid="pingfangx" creationdate="20220420T091911Z">
        <seg>需要注意的一点是，对于每个应用插件的项目都会创建一个新的插件实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optimally, the test source code for each test type should be stored in dedicated source directories.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T092056Z" creationid="pingfangx" creationdate="20220419T092042Z">
        <seg>最佳情况下，每种测试类型的测试源代码都应该存储在专用的源目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optimize the loading and reuse of plugin classes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071712Z" creationid="pingfangx" creationdate="20220420T071712Z">
        <seg>优化插件类的加载和重用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optimizing Build Times</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063221Z" creationid="pingfangx" creationdate="20220420T063219Z">
        <seg>优化构建时间</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Optionally, the &lt;c2&gt;buildSrc&lt;/c2&gt; directory can host a build script if additional configuration is needed (e.g. to apply plugins or to declare dependencies).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100249Z" creationid="pingfangx" creationdate="20220419T100233Z">
        <seg>或者，如果需要额外配置(例如应用插件或声明依赖项)，则 &lt;c2&gt;buildSrc&lt;/c2&gt; 目录可以添加构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or in other words, a subproject’s &lt;e1&gt;type&lt;/e1&gt; tells us what traits the project has.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052636Z" creationid="pingfangx" creationdate="20220408T052516Z">
        <seg>或者换句话说，子项目的 &lt;e1&gt;类型&lt;/e1&gt; 告诉我们项目具有的特征。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Or some combination of the two.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082544Z" creationid="pingfangx" creationdate="20220420T082534Z">
        <seg>或两者的一些组合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Organize and publish build logic for reuse in other projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052934Z" creationid="pingfangx" creationdate="20220420T052934Z">
        <seg>组织并发布构建逻辑，以便在其他项目中重用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Organize build logic into reusable pieces</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052910Z" creationid="pingfangx" creationdate="20220420T052909Z">
        <seg>将构建逻辑组织成可重用的部分</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Organize your build logic into a Gradle plugin written in Java.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T052853Z" creationid="pingfangx" creationdate="20220420T052848Z">
        <seg>将构建逻辑组织到用 Java 编写的 Gradle 插件中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Organizing Build Logic</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061849Z" creationid="pingfangx" creationdate="20220420T061849Z">
        <seg>组织构建逻辑</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Organizing build logic</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105538Z" creationid="pingfangx" creationdate="20220419T105538Z">
        <seg>组织构建逻辑</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other Developing Gradle Topics</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062148Z" creationid="pingfangx" creationdate="20220420T062133Z">
        <seg>其他开发中的 Gradle 主题</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Other language plugins follow the same pattern.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091527Z" creationid="pingfangx" creationdate="20220419T091514Z">
        <seg>其他的语言插件也遵循相同的模式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Packaging a plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081722Z" creationid="pingfangx" creationdate="20220420T081722Z">
        <seg>打包插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please refer to the corresponding &lt;a1&gt;section&lt;/a1&gt; on how to make your plugin available on this site.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084325Z" creationid="pingfangx" creationdate="20220420T084307Z">
        <seg>请参阅相应的 &lt;a1&gt;段落&lt;/a1&gt;，了解如何在本网站上提供你的插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please see &lt;a0&gt;Developing Custom Gradle Task Types&lt;/a0&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090311Z" creationid="pingfangx" creationdate="20220420T090311Z">
        <seg>有关详细信息，请参阅 &lt;a0&gt;Developing Custom Gradle Task Types&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Please see &lt;a0&gt;Developing Custom Gradle Types&lt;/a0&gt; for more details.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090337Z" creationid="pingfangx" creationdate="20220420T090335Z">
        <seg>有关详细信息，请参阅 &lt;a0&gt;Developing Custom Gradle Types&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071041Z" creationid="pingfangx" creationdate="20220420T071041Z">
        <seg>插件管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Marker Artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080212Z" creationid="pingfangx" creationdate="20220420T071211Z">
        <seg>插件标记库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Resolution Rules</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071155Z" creationid="pingfangx" creationdate="20220420T071154Z">
        <seg>插件解析规则</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin Version Management</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071142Z" creationid="pingfangx" creationdate="20220420T071140Z">
        <seg>插件版本管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin ids are fully qualified in a manner similar to Java packages (i.e. a reverse domain name).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082828Z" creationid="pingfangx" creationdate="20220420T082816Z">
        <seg>插件 id 以类似于 Java 包(即反向域名)的方式完全限定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin ids should conform to the following:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082953Z" creationid="pingfangx" creationdate="20220420T082946Z">
        <seg>插件 id 应符合以下要求：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugin resolution rules allow you to modify plugin requests made in &lt;c0&gt;plugins {}&lt;/c0&gt; blocks, e.g. changing the requested version or explicitly specifying the implementation artifact coordinates.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075848Z" creationid="pingfangx" creationdate="20220420T075726Z">
        <seg>插件解析规则允许你修改在 &lt;c0&gt;plugins {}&lt;/c0&gt; 块中发出的插件请求，例如更改请求的版本或明确指定实现库坐标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins add new tasks (e.g. &lt;a1&gt;JavaCompile&lt;/a1&gt;), domain objects (e.g. &lt;a2&gt;SourceSet&lt;/a2&gt;), conventions (e.g. Java source is located at &lt;c3&gt;src/main/java&lt;/c3&gt;) as well as extending core objects and objects from other plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063832Z" creationid="pingfangx" creationdate="20220420T063717Z">
        <seg>插件会添加新任务(例如 &lt;a1&gt;JavaCompile&lt;/a1&gt;)、域对象(例如 &lt;a2&gt;SourceSet&lt;/a2&gt;)、约定(例如 Java 源码位于 &lt;c3&gt;src/main/java&lt;/c3&gt;)以及扩展核心对象及来自其他插件对象。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins can be applied using a &lt;e0&gt;plugin id&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080736Z" creationid="pingfangx" creationdate="20220420T080726Z">
        <seg>可以使用 &lt;e0&gt;插件 id&lt;/e0&gt; 应用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins can then be applied by id to any build script via the &lt;c2&gt;plugins {}&lt;/c2&gt; block.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075324Z" creationid="pingfangx" creationdate="20220420T075222Z">
        <seg>然后可以通过 id 将插件通过 &lt;c2&gt;plugins {}&lt;/c2&gt; 块应用于任何构建脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins do this using &lt;e0&gt;extension objects&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092203Z" creationid="pingfangx" creationdate="20220420T092149Z">
        <seg>插件使用 &lt;e0&gt;extension objects (扩展对象)&lt;/e0&gt; 来实现这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Plugins often also provide custom task types.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090302Z" creationid="pingfangx" creationdate="20220420T090301Z">
        <seg>插件通常还提供自定义任务类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precompiled script plugin names have two important limitations:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085059Z" creationid="pingfangx" creationdate="20220420T085059Z">
        <seg>预编译脚本插件名称有两个重要限制：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precompiled script plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081755Z" creationid="pingfangx" creationdate="20220420T081753Z">
        <seg>预编译脚本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precompiled script plugins are compiled into class files and packaged into a jar.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085200Z" creationid="pingfangx" creationdate="20220420T085153Z">
        <seg>预编译脚本插件被编译成类文件并打包到 jar 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precompiled script plugins can apply other precompiled script plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T030954Z" creationid="pingfangx" creationdate="20220420T030952Z">
        <seg>预编译脚本插件可以应用其他预编译脚本插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Precompiled script plugins can use classes defined in the main source set of the plugins project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T031503Z" creationid="pingfangx" creationdate="20220420T031224Z">
        <seg>预编译脚本插件可以使用插件项目的主源码集中定义的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Preventing accidental upgrades</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062920Z" creationid="pingfangx" creationdate="20220420T062920Z">
        <seg>防止意外升级</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Producing and Consuming Variants of Libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062955Z" creationid="pingfangx" creationdate="20220420T062942Z">
        <seg>生产和消费库的变体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Promotes reuse and reduces the overhead of maintaining similar logic across multiple projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064101Z" creationid="pingfangx" creationdate="20220420T064059Z">
        <seg>促进重用并减少跨多个项目维护类似逻辑的开销</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Properties in a build script can easily become a maintenance headache and convolute the build script logic.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100711Z" creationid="pingfangx" creationdate="20220419T100711Z">
        <seg>构建脚本中的属性很容易成为维护难题，并使构建脚本逻辑复杂化。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Provide editors detailed information about the potential properties and values in the buildscript for editing assistance.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071802Z" creationid="pingfangx" creationdate="20220420T071736Z">
        <seg>为编辑者提供有关 buildscript 中潜在属性和值的详细信息，以获得编辑帮助。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing Libraries</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063111Z" creationid="pingfangx" creationdate="20220420T063103Z">
        <seg>发布库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062127Z" creationid="pingfangx" creationdate="20220420T062127Z">
        <seg>发布插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing configuration, such as a common group name for the libraries as well as the repository coordinates might be a cross-cutting concern that both libraries need to share.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105447Z" creationid="pingfangx" creationdate="20220419T105447Z">
        <seg>发布配置(例如库的公共组名以及存储库坐标)可能是两个库都需要共享的跨领域问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing these markers is automated by the &lt;a4&gt;java-gradle-plugin&lt;/a4&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080402Z" creationid="pingfangx" creationdate="20220420T080341Z">
        <seg>&lt;a4&gt;java-gradle-plugin&lt;/a4&gt; 自动发布这些标记。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Publishing your plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084209Z" creationid="pingfangx" creationdate="20220420T084204Z">
        <seg>发布你的插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Quick Start</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060927Z" creationid="pingfangx" creationdate="20220420T060927Z">
        <seg>快速开始</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Rather than using a plugin id, plugins can also be applied by simply specifying the class of the plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080834Z" creationid="pingfangx" creationdate="20220420T080749Z">
        <seg>除了使用插件 id，还可以通过简单地指定插件的类来应用插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Refer to &lt;a0&gt;Lazy Configuration&lt;/a0&gt; for more information.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094649Z" creationid="pingfangx" creationdate="20220420T094646Z">
        <seg>有关更多信息，请参阅 &lt;a0&gt;Lazy Configuration&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Refer to the reference page of the relevant plugin to learn about its default conventions.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093951Z" creationid="pingfangx" creationdate="20220419T093951Z">
        <seg>请参阅相关插件的参考页面，了解其默认约定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reference</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063433Z" creationid="pingfangx" creationdate="20220420T063433Z">
        <seg>参考</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Release Notes</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060903Z" creationid="pingfangx" creationdate="20220420T060802Z">
        <seg>版本说明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Remember to run a full build regularly or at least when you’re done, though.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100440Z" creationid="pingfangx" creationdate="20220419T100428Z">
        <seg>请记住定期运行完整的构建，或者至少在完成时进行完整的构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Reuse convention plugins in both main build and build logic build</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T053031Z" creationid="pingfangx" creationdate="20220420T053030Z">
        <seg>在主构建和构建逻辑构建中重用约定插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running &lt;c0&gt;gradle publish&lt;/c0&gt; in the sample directory creates the following Maven repository layout (the Ivy layout is similar):</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080627Z" creationid="pingfangx" creationdate="20220420T080606Z">
        <seg>在示例目录中运行 &lt;c0&gt;gradle publish&lt;/c0&gt; 将创建以下 Maven 仓库布局(Ivy 布局类似)：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Running Gradle Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061147Z" creationid="pingfangx" creationdate="20220420T061146Z">
        <seg>运行 Gradle 构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sample Index</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T034613Z" creationid="pingfangx" creationdate="20220420T034551Z">
        <seg>示例索引</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Samples</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061017Z" creationid="pingfangx" creationdate="20220420T061017Z">
        <seg>示例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Scala Plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062542Z" creationid="pingfangx" creationdate="20220420T062542Z">
        <seg>Scala 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Script plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064829Z" creationid="pingfangx" creationdate="20220420T064829Z">
        <seg>脚本插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Script plugins are additional build scripts that further configure the build and usually implement a declarative approach to manipulating the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064526Z" creationid="pingfangx" creationdate="20220420T064446Z">
        <seg>脚本插件是进一步配置构建的额外构建脚本，通常实现一种声明性方法来操作构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Script plugins are automatically resolved and can be applied from a script on the local filesystem or at a remote location.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064839Z" creationid="pingfangx" creationdate="20220420T064837Z">
        <seg>脚本插件是自动解析的，可以从本地文件系统或远程位置的脚本应用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Script plugins are self-resolving in that they are resolved from the specific file path or URL provided when applying them.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065534Z" creationid="pingfangx" creationdate="20220420T065534Z">
        <seg>脚本插件是自解析的，因为它们是从应用它们时提供的特定文件路径或 URL 解析的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;Organizing Gradle Projects&lt;/a0&gt; for more details about the &lt;c1&gt;buildSrc&lt;/c1&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082345Z" creationid="pingfangx" creationdate="20220420T082341Z">
        <seg>有关 &lt;c1&gt;buildSrc&lt;/c1&gt; 项目的更多详细信息，请参阅 &lt;a0&gt;Organizing Gradle Projects&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;PluginDependenciesSpec&lt;/a0&gt; for more information on using the Plugin DSL.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071636Z" creationid="pingfangx" creationdate="20220420T071603Z">
        <seg>有关使用 plugins DSL 的更多信息，请参阅 &lt;a0&gt;PluginDependenciesSpec&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;PluginManagementSpec&lt;/a0&gt; for complete documentation for using the &lt;c1&gt;pluginManagement {}&lt;/c1&gt; block.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080201Z" creationid="pingfangx" creationdate="20220420T080200Z">
        <seg>有关使用 &lt;c1&gt;pluginManagement {}&lt;/c1&gt; 块的完整文档，请参见 &lt;a0&gt;PluginManagementSpec&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See &lt;a0&gt;plugin version management&lt;/a0&gt; if you want to use a variable to define a plugin version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072746Z" creationid="pingfangx" creationdate="20220420T072730Z">
        <seg>如果要使用变量定义插件版本，请参阅&lt;a0&gt;插件版本管理&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>See the &lt;a0&gt;Ivy&lt;/a0&gt; and &lt;a1&gt;Maven&lt;/a1&gt; chapters on publishing artifacts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084236Z" creationid="pingfangx" creationdate="20220420T084224Z">
        <seg>请参阅关于发布库的 &lt;a0&gt;Ivy&lt;/a0&gt; 和 &lt;a1&gt;Maven&lt;/a1&gt; 章节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Separate language-specific source files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091942Z" creationid="pingfangx" creationdate="20220419T091326Z">
        <seg>隔离语言特定的源文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Separate source files per test type</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T092008Z" creationid="pingfangx" creationdate="20220419T091944Z">
        <seg>每种测试类型隔离单独的源文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Separated test source code has a positive impact on maintainability and separation of concerns as you can run test types independent from each other.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T092442Z" creationid="pingfangx" creationdate="20220419T092105Z">
        <seg>分离的测试源代码对可维护性和关注点分离有积极的影响，因为你可以独立运行某种测试类型。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Setting up Publishing</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063132Z" creationid="pingfangx" creationdate="20220420T063125Z">
        <seg>设置发布</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Shared Build Services</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062204Z" creationid="pingfangx" creationdate="20220420T062202Z">
        <seg>共享构建服务</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing Build Logic between Subprojects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060305Z" creationid="pingfangx" creationdate="20220420T060300Z">
        <seg>在子项目之间共享构建逻辑</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing Outputs of Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063049Z" creationid="pingfangx" creationdate="20220420T063044Z">
        <seg>分享项目输出</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062850Z" creationid="pingfangx" creationdate="20220420T062850Z">
        <seg>共享版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing build logic between subprojects Sample</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104917Z" creationid="pingfangx" creationdate="20220419T104910Z">
        <seg>在子项目之间共享构建逻辑的示例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Sharing convention plugins with build logic build Sample</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104806Z" creationid="pingfangx" creationdate="20220419T104752Z">
        <seg>使用构建逻辑共享约定插件的构建示例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Signing Artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063147Z" creationid="pingfangx" creationdate="20220420T063138Z">
        <seg>签名产物</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, if the plugin was developed at the baz organization, the plugin id might be &lt;c1&gt;org.baz.bar&lt;/c1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082936Z" creationid="pingfangx" creationdate="20220420T082935Z">
        <seg>类似地，如果插件是在 baz 组织开发的，那么插件 id 可能是 &lt;c1&gt;org.baz.bar&lt;/c1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Similarly, the &lt;a6&gt;Application Plugin&lt;/a6&gt; applies and configures the &lt;a7&gt;Java Plugin&lt;/a7&gt; and the &lt;a8&gt;Distribution Plugin&lt;/a8&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052845Z" creationid="pingfangx" creationdate="20220408T052843Z">
        <seg>类似地，&lt;a6&gt;Application Plugin&lt;/a6&gt; 应用并配置 &lt;a7&gt;Java Plugin&lt;/a7&gt; 和 &lt;a8&gt;Distribution Plugin&lt;/a8&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since the &lt;c0&gt;plugins {}&lt;/c0&gt; DSL block only allows for declaring plugins by their globally unique plugin &lt;c1&gt;id&lt;/c1&gt; and &lt;c2&gt;version&lt;/c2&gt; properties, Gradle needs a way to look up the coordinates of the plugin implementation artifact.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080303Z" creationid="pingfangx" creationdate="20220420T080246Z">
        <seg>由于 &lt;c0&gt;plugins {}&lt;/c0&gt;DSL 块只允许通过其全局唯一的插件 &lt;c1&gt;id&lt;/c1&gt; 和 &lt;c2&gt;version&lt;/c2&gt; 属性来声明插件，Gradle 需要一种方法来查找插件实现库的坐标。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Since this is such a common use case, it’s recommended that build authors use the &lt;a0&gt;plugins DSL&lt;/a0&gt; to both resolve and apply plugins in one step.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065924Z" creationid="pingfangx" creationdate="20220420T065814Z">
        <seg>由于这是一个非常常见的用例，因此建议使用 &lt;a0&gt;plugins DSL&lt;/a0&gt; 在一步中实现解析和应用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>So how does Gradle find the &lt;a0&gt;Plugin&lt;/a0&gt; implementation?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090602Z" creationid="pingfangx" creationdate="20220420T090548Z">
        <seg>那么 Gradle 是如何找到 &lt;a0&gt;Plugin&lt;/a0&gt; 实现的呢？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some compilers are capable of cross-compiling multiple languages in the same source directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091552Z" creationid="pingfangx" creationdate="20220419T091551Z">
        <seg>有些编译器能够在同一源目录中交叉编译多种语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Some other &lt;e0&gt;code&lt;/e0&gt; subprojects may be dedicated for &lt;e1&gt;testing purposes&lt;/e1&gt; and so on.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052623Z" creationid="pingfangx" creationdate="20220408T052412Z">
        <seg>其他一些 &lt;e0&gt;代码&lt;/e0&gt; 子项目可以专用于 &lt;e1&gt;测试目的&lt;/e1&gt; 等。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Source code and build logic of every software project should be organized in a meaningful way.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091107Z" creationid="pingfangx" creationdate="20220419T091107Z">
        <seg>每个软件项目的源代码和构建逻辑都应该以一种有意义的方式组织起来。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>SpotBugs is an external plugin - external plugins &lt;a0&gt;need to be added as implementation dependencies&lt;/a0&gt; before they can be applied in a precompiled script plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T022838Z" creationid="pingfangx" creationdate="20220420T022752Z">
        <seg>Spotbugs 是一个外部插件 - 外部插件 &lt;a0&gt;需要添加为 implementation 依赖&lt;/a0&gt;，然后才能在预编译的脚本插件中应用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standalone project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082432Z" creationid="pingfangx" creationdate="20220420T082432Z">
        <seg>独立项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Standardizing builds with a custom Gradle distribution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101926Z" creationid="pingfangx" creationdate="20220419T101301Z">
        <seg>使用自定义 Gradle 分发标准化构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Starting Plugin Development</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062113Z" creationid="pingfangx" creationdate="20220420T062113Z">
        <seg>开始插件开发</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring Individual Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061714Z" creationid="pingfangx" creationdate="20220420T061603Z">
        <seg>构建个人构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring Large Projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061744Z" creationid="pingfangx" creationdate="20220420T061744Z">
        <seg>组织大型项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring Software Products</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061708Z" creationid="pingfangx" creationdate="20220420T061708Z">
        <seg>构建软件产品</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Structuring a software product project with Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T053046Z" creationid="pingfangx" creationdate="20220420T053043Z">
        <seg>用 Gradle 构建软件产品项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tasks should define inputs and outputs to get the performance benefits of &lt;a0&gt;incremental build functionality&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101038Z" creationid="pingfangx" creationdate="20220419T101025Z">
        <seg>任务应定义输入和输出以获取 &lt;a0&gt;增量构建功能&lt;/a0&gt; 的性能优势。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Terminology</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062600Z" creationid="pingfangx" creationdate="20220420T062600Z">
        <seg>术语</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing C++ projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063355Z" creationid="pingfangx" creationdate="20220420T063349Z">
        <seg>测试 C++ 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing Java &amp; JVM projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062503Z" creationid="pingfangx" creationdate="20220420T062503Z">
        <seg>测试 Java &amp; JVM 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062124Z" creationid="pingfangx" creationdate="20220420T062124Z">
        <seg>测试插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing Swift projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063404Z" creationid="pingfangx" creationdate="20220420T063404Z">
        <seg>测试 Swift 项目</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Testing a Build with TestKit</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062210Z" creationid="pingfangx" creationdate="20220420T062209Z">
        <seg>使用 TestKit 测试构建</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>That is, you can safely apply any plugin multiple times without side effects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065746Z" creationid="pingfangx" creationdate="20220420T065744Z">
        <seg>也就是说，您可以安全地多次应用任何插件，而不会产生副作用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;JavaPlugin&lt;/c0&gt; symbol in the above sample refers to the &lt;a1&gt;JavaPlugin&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080839Z" creationid="pingfangx" creationdate="20220420T080837Z">
        <seg>上面示例中的 &lt;c0&gt;JavaPlugin&lt;/c0&gt; 符号指的是 &lt;a1&gt;JavaPlugin&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;gradle.properties&lt;/c0&gt; helps with keeping properties separate from the build script and should be explored as viable option.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100802Z" creationid="pingfangx" creationdate="20220419T100801Z">
        <seg>&lt;c0&gt;gradle.properties&lt;/c0&gt; 有助于将属性与构建脚本分开，应该作为可行的选项加以探索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; plugin is then applied to the &lt;c1&gt;buildSrc&lt;/c1&gt; build:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104256Z" creationid="pingfangx" creationdate="20220419T104255Z">
        <seg>&lt;c0&gt;myproject.java-conventions&lt;/c0&gt; 插件随后应用于 &lt;c1&gt;buildSrc&lt;/c1&gt; 构建：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; plugin uses SpotBugs plugin to perform static code analysis.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T022207Z" creationid="pingfangx" creationdate="20220420T022203Z">
        <seg>&lt;c0&gt;myproject.java-conventions&lt;/c0&gt; 插件使用 Spotbugs 插件来执行静态代码分析。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;myproject.library-conventions&lt;/c0&gt; plugin applies the &lt;c1&gt;myproject.java-conventions&lt;/c1&gt; plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T031002Z" creationid="pingfangx" creationdate="20220420T031001Z">
        <seg>&lt;c0&gt;myproject.library-conventions&lt;/c0&gt; 插件应用 &lt;c1&gt;myproject.java-conventions&lt;/c1&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;pluginManagement {}&lt;/c0&gt; block may only appear in either the &lt;c1&gt;settings.gradle&lt;/c1&gt; file, where it must be the first block in the file, or in an &lt;a2&gt;Initialization Script&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T074318Z" creationid="pingfangx" creationdate="20220420T074232Z">
        <seg>&lt;c0&gt;pluginManagement {}&lt;/c0&gt; 块只可以用在 &lt;c1&gt;settings.gradle&lt;/c1&gt; 文件中，其中它必须是文件中的第一个块，或者用在 &lt;a2&gt;Initialization Script&lt;/a2&gt; 中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;plugins {}&lt;/c0&gt; block can currently only be used in a project’s build script and the settings.gradle file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072901Z" creationid="pingfangx" creationdate="20220420T072845Z">
        <seg>&lt;c0&gt;plugins {}&lt;/c0&gt; 块当前只能用于项目的构建脚本和 settings.gradle 文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;plugins {}&lt;/c0&gt; block does not support arbitrary code.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072028Z" creationid="pingfangx" creationdate="20220420T072028Z">
        <seg>&lt;c0&gt;plugins {}&lt;/c0&gt; 块不支持任意代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c0&gt;plugins {}&lt;/c0&gt; block must also be a top level statement in the buildscript.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072751Z" creationid="pingfangx" creationdate="20220420T072750Z">
        <seg>&lt;c0&gt;plugins {}&lt;/c0&gt; 块也必须是构建脚本中的顶级语句。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The &lt;c5&gt;apply&lt;/c5&gt; statement with a &lt;c6&gt;boolean&lt;/c6&gt; can be used to disable the default behavior of applying the plugin immediately (e.g. you want to apply it only in &lt;c7&gt;subprojects&lt;/c7&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072723Z" creationid="pingfangx" creationdate="20220420T072723Z">
        <seg>带 &lt;c6&gt;boolean&lt;/c6&gt; 的 &lt;c5&gt;apply&lt;/c5&gt; 语句可用于禁用立即应用插件的默认行为(例如，你希望仅在 &lt;c7&gt;subprojects&lt;/c7&gt; 中应用它)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle &lt;a0&gt;plugin portal&lt;/a0&gt; provides an interface for searching and exploring community plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065017Z" creationid="pingfangx" creationdate="20220420T064955Z">
        <seg>Gradle &lt;a0&gt;plugin portal&lt;/a0&gt; 提供了用于搜索和探索社区插件的接口。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle &lt;a1&gt;Project&lt;/a1&gt; has an associated &lt;a2&gt;ExtensionContainer&lt;/a2&gt; object that contains all the settings and properties for the plugins that have been applied to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092231Z" creationid="pingfangx" creationdate="20220420T092215Z">
        <seg>Gradle 的 &lt;a1&gt;Project&lt;/a1&gt; 有一个关联的 &lt;a2&gt;ExtensionContainer&lt;/a2&gt; 对象，其中包含已应用于该项目的插件的所有设置和属性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Gradle Plugin Portal (&lt;c0&gt;gradlePluginPortal()&lt;/c0&gt;) is added as a repository for plugin dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T022948Z" creationid="pingfangx" creationdate="20220420T022948Z">
        <seg>Gradle Plugin Portal(&lt;c0&gt;gradlePluginPortal()&lt;/c0&gt;)作为插件依赖项的存储库添加。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The Groovy compiler can handle the scenario of mixing Java and Groovy source files located in &lt;c0&gt;src/main/groovy&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091635Z" creationid="pingfangx" creationdate="20220419T091605Z">
        <seg>Groovy 编译器可以处理位于 &lt;c0&gt;src/main/groovy&lt;/c0&gt; 中 Java 和 Groovy 源文件混合的场景。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The algorithm stops searching as soon as it finds the settings file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094149Z" creationid="pingfangx" creationdate="20220419T094132Z">
        <seg>该算法一旦找到 settings 文件就会停止搜索。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The answer is - you need to provide a properties file in the JAR’s &lt;c1&gt;META-INF/gradle-plugins&lt;/c1&gt; directory that matches the id of your plugin, which is handled by &lt;a2&gt;Java Gradle Plugin Development Plugin&lt;/a2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091355Z" creationid="pingfangx" creationdate="20220420T090612Z">
        <seg>答案是 - 你需要在 jar 的 &lt;c1&gt;META-INF/gradle-plugins&lt;/c1&gt; 目录中提供一个属性文件，该文件与插件的 id 匹配，&lt;a2&gt;Java Gradle Plugin Development Plugin&lt;/a2&gt; 会帮你处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build is configured as follows:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T103943Z" creationid="pingfangx" creationdate="20220419T103941Z">
        <seg>构建配置如下：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build is then included in the root project’s &lt;e4&gt;settings&lt;/e4&gt; file as seen in the above snippet.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104231Z" creationid="pingfangx" creationdate="20220419T104217Z">
        <seg>然后，构建将包含在根项目的 &lt;e4&gt;settings&lt;/e4&gt; 文件中，如上面的代码片段所示。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The build script author interacts only with the DSL defined by the extension.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094608Z" creationid="pingfangx" creationdate="20220420T094607Z">
        <seg>构建脚本作者仅与扩展定义的 DSL 交互。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The default behavior of the &lt;c2&gt;plugins {}&lt;/c2&gt; block is to immediately &lt;c3&gt;resolve&lt;/c3&gt; &lt;e4&gt;and&lt;/e4&gt; &lt;c5&gt;apply&lt;/c5&gt; the plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073620Z" creationid="pingfangx" creationdate="20220420T073218Z">
        <seg>&lt;c2&gt;plugins {}&lt;/c2&gt; 块的默认行为是立即 &lt;c3&gt;解析&lt;/c3&gt;&lt;e4&gt;并&lt;/e4&gt;&lt;c5&gt;应用&lt;/c5&gt;插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The dependency artifact coordinates (GAV) for a plugin can be different from the plugin id.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T022933Z" creationid="pingfangx" creationdate="20220420T022930Z">
        <seg>插件的依赖项工件坐标(GAV)可以不同于插件 id。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The directory &lt;c0&gt;buildSrc&lt;/c0&gt; is treated as an &lt;a1&gt;included build&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095101Z" creationid="pingfangx" creationdate="20220419T095101Z">
        <seg>该目录 &lt;c0&gt;buildSrc&lt;/c0&gt; 被视为 &lt;a1&gt;included build&lt;/a1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The easiest and the recommended way to package and publish a plugin is to use the &lt;a0&gt;Java Gradle Plugin Development Plugin&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084503Z" creationid="pingfangx" creationdate="20220420T084503Z">
        <seg>打包和发布插件最简单也是最推荐的方法是使用 &lt;a0&gt;Java Gradle Plugin Development Plugin&lt;/a0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The extension object is added to the project with the name &lt;c2&gt;greeting&lt;/c2&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093612Z" creationid="pingfangx" creationdate="20220420T093611Z">
        <seg>扩展对象被添加到项目中，名称为 &lt;c2&gt;greeting&lt;/c2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The file can either be empty or define the desired name of the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094229Z" creationid="pingfangx" creationdate="20220419T094228Z">
        <seg>文件可以为空，也可以定义所需的项目名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how to tie a plugin implementation class — &lt;c1&gt;my.MyPlugin&lt;/c1&gt; — defined in &lt;e2&gt;buildSrc&lt;/e2&gt; to the ID "my-plugin":</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073936Z" creationid="pingfangx" creationdate="20220420T073803Z">
        <seg>以下示例显示了如何将定义于 &lt;e2&gt;buildSrc&lt;/e2&gt; 中的插件实现类 &lt;c1&gt;my.MyPlugin&lt;/c1&gt;，绑定为 ID “my-plugin”：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows how you might do this when the plugin has been published to a local repository:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084705Z" creationid="pingfangx" creationdate="20220420T084652Z">
        <seg>以下示例显示了当插件已发布到本地仓库时，可以如何执行此操作：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following example shows you how this works.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093713Z" creationid="pingfangx" creationdate="20220420T093703Z">
        <seg>下面的例子展示了它的工作原理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following sample contains a greeting plugin, which adds a &lt;c2&gt;hello&lt;/c2&gt; task to the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091844Z" creationid="pingfangx" creationdate="20220420T091817Z">
        <seg>下面的示例包含一个 greeting 插件，它向项目中添加了一个 &lt;c2&gt;hello&lt;/c2&gt; 任务。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following sections also touch on common problems and how to avoid them.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091215Z" creationid="pingfangx" creationdate="20220419T091202Z">
        <seg>以下各节还涉及一些常见问题以及如何避免这些问题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following source tree contains Java and Kotlin source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091722Z" creationid="pingfangx" creationdate="20220419T091720Z">
        <seg>下面的源代码树包含 Java 和 Kotlin 源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The following steps are typical for creating a custom Gradle distribution:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101804Z" creationid="pingfangx" creationdate="20220419T101752Z">
        <seg>以下步骤是创建自定义分发的典型步骤：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The form is:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072106Z" creationid="pingfangx" creationdate="20220420T072100Z">
        <seg>形式是：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The imperative logic is hidden in the plugin implementation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094623Z" creationid="pingfangx" creationdate="20220420T094620Z">
        <seg>命令逻辑隐藏在插件实现中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The initialization scripts come bundled with the distribution and are applied every time the build is run.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101929Z" creationid="pingfangx" creationdate="20220419T101543Z">
        <seg>初始化脚本与分发捆绑在一起，并在每次运行构建时应用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The internal library subproject applies &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; plugin:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110020Z" creationid="pingfangx" creationdate="20220419T110009Z">
        <seg>内部库子项目应用 &lt;c0&gt;myproject.java-conventions&lt;/c0&gt; 插件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The last portion of the directory path usually indicates the expected language of the source files.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091537Z" creationid="pingfangx" creationdate="20220419T091536Z">
        <seg>目录路径的最后一部分通常表示源文件的预期语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The most common use case for using a plugin is to both resolve the plugin and apply it to the current project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065801Z" creationid="pingfangx" creationdate="20220420T065800Z">
        <seg>使用插件最常见的用例是解析插件并将其应用于当前项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The name of the closure block in the build script (&lt;c1&gt;greeting&lt;/c1&gt;) needs to match the extension object name.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093808Z" creationid="pingfangx" creationdate="20220420T093751Z">
        <seg>构建脚本中的闭包块(&lt;c1&gt;greeting&lt;/c1&gt;)的名称需要匹配扩展对象名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The output directory for compiled source code and other artifacts (like the JAR file) is &lt;c0&gt;build&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093417Z" creationid="pingfangx" creationdate="20220419T093403Z">
        <seg>编译的源代码和其他产物(如 JAR 文件)的输出目录是 &lt;c0&gt;build&lt;/c0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin can then be applied by ID as normal:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073952Z" creationid="pingfangx" creationdate="20220420T073938Z">
        <seg>然后，该插件可以通用 ID 正常应用：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin is visible to every build script used by the build.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082324Z" creationid="pingfangx" creationdate="20220420T082310Z">
        <seg>该插件对该构建使用的每个构建脚本都可见。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin logic provides users with sensible defaults and standards, the conventions, in a certain context.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093306Z" creationid="pingfangx" creationdate="20220419T093230Z">
        <seg>插件逻辑为用户提供了特定上下文中的合理的默认值和标准，即 convention。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin version in this case is defined in the dependency declaration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090230Z" creationid="pingfangx" creationdate="20220420T090209Z">
        <seg>本例中的插件版本在依赖声明中定义。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin version is determined from the dependency version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T023003Z" creationid="pingfangx" creationdate="20220420T023002Z">
        <seg>插件版本由依赖版本决定。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugin version is loaded from &lt;c0&gt;gradle.properties&lt;/c0&gt; and configured in the settings script, allowing the plugin to be added to any project without specifying the version.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075638Z" creationid="pingfangx" creationdate="20220420T075603Z">
        <seg>插件版本从 &lt;c0&gt;gradle.properties&lt;/c0&gt; 加载并在 settings 脚本中进行配置，允许在不指定版本的情况下将插件添加到任何项目中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugins DSL block configures an instance of &lt;a1&gt;PluginDependenciesSpec&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071506Z" creationid="pingfangx" creationdate="20220420T071505Z">
        <seg>plugins DSL 块配置 &lt;a1&gt;PluginDependenciesSpec&lt;/a1&gt; 的实例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugins DSL is processed in a way which allows Gradle to determine the plugins in use very early and very quickly.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071704Z" creationid="pingfangx" creationdate="20220420T071651Z">
        <seg>plugins DSL 的处理方式允许 Gradle 很早很快地确定正在使用的插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The plugins DSL provides a succinct and convenient way to declare plugin dependencies.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071437Z" creationid="pingfangx" creationdate="20220420T071426Z">
        <seg>plugins DSL 提供了一种简洁方便的方式来声明插件依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The project object is passed as a parameter, which the plugin can use to configure the project however it needs to.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091812Z" creationid="pingfangx" creationdate="20220420T091704Z">
        <seg>project 对象作为参数传递，插件可以使用该参数来配置项目，它需要这样做。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The shared &lt;e0&gt;convention plugin&lt;/e0&gt; &lt;c1&gt;myproject.java-conventions&lt;/c1&gt; is implemented in an &lt;e2&gt;included build&lt;/e2&gt; called &lt;c3&gt;build-conventions&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104550Z" creationid="pingfangx" creationdate="20220419T104053Z">
        <seg>共享的 &lt;e0&gt;约定插件&lt;/e0&gt; &lt;c1&gt;myproject.java-conventions&lt;/c1&gt; 在名为 &lt;c3&gt;build-conventions&lt;/c3&gt; 的  &lt;e2&gt;included build&lt;/e2&gt; 中实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The traits above identify a subproject’s &lt;e0&gt;type&lt;/e0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T060415Z" creationid="pingfangx" creationdate="20220408T052505Z">
        <seg>上述特征识别子项目的 &lt;e0&gt;类型&lt;/e0&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The two public library subprojects apply &lt;c0&gt;myproject.library-conventions&lt;/c0&gt; plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110047Z" creationid="pingfangx" creationdate="20220419T110044Z">
        <seg>两个公共库子项目应用 &lt;c0&gt;myproject.library-conventions&lt;/c0&gt; 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>The type used on the &lt;c1&gt;configure&lt;/c1&gt; function in the build script (&lt;c2&gt;GreetingPluginExtension&lt;/c2&gt;) needs to match the extension type.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093905Z" creationid="pingfangx" creationdate="20220420T093904Z">
        <seg>构建脚本(&lt;c2&gt;GreetingPluginExtension&lt;/c2&gt;)中的 &lt;c1&gt;configure&lt;/c1&gt; 函数上使用的类型需要与扩展类型匹配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then we will look at creating a standalone project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082555Z" creationid="pingfangx" creationdate="20220420T082552Z">
        <seg>然后我们将介绍创建一个独立的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, when the block is executed, the receiver of the block is the extension.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093928Z" creationid="pingfangx" creationdate="20220420T093927Z">
        <seg>然后，当执行块时，块的接收器是扩展。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Then, when the closure is executed, the fields on the extension object will be mapped to the variables within the closure based on the standard Groovy closure delegate feature.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093850Z" creationid="pingfangx" creationdate="20220420T093820Z">
        <seg>然后，在执行闭包时，扩展对象上的字段将根据标准 Groovy 闭包委托功能映射到闭包中的变量。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are also some constraints, some of which are temporary limitations while the mechanism is still being developed and some are inherent to the new approach.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072016Z" creationid="pingfangx" creationdate="20220420T071905Z">
        <seg>还有一些限制，其中一些是暂时的限制，因为机制仍在开发中，而另一些是新方法固有的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are several places where you can put the source for the plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082050Z" creationid="pingfangx" creationdate="20220420T082048Z">
        <seg>有几个地方可以放置插件的源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are some drawbacks to the approach.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101431Z" creationid="pingfangx" creationdate="20220419T101431Z">
        <seg>这种方法有一些缺点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are some key differences between the &lt;c0&gt;plugins {}&lt;/c0&gt; block mechanism and the “traditional” &lt;c1&gt;apply()&lt;/c1&gt; method mechanism.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071900Z" creationid="pingfangx" creationdate="20220420T071835Z">
        <seg>&lt;c0&gt;plugins {}&lt;/c0&gt; 块机制和“传统”的&lt;c1&gt;apply()&lt;/c1&gt; 方法机制之间存在一些关键差异。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two general types of plugins in Gradle, &lt;e0&gt;binary&lt;/e0&gt; plugins and &lt;e1&gt;script&lt;/e1&gt; plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064141Z" creationid="pingfangx" creationdate="20220420T064140Z">
        <seg>Gradle 中有两种常见的插件，&lt;e0&gt;binary (二进制)&lt;/e0&gt; 插件和 &lt;e1&gt;script (脚本)&lt;/e1&gt; 插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>There are two most common uses of cross-configuration that can be better modelled using convention plugins:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093753Z" creationid="pingfangx" creationdate="20220408T055609Z">
        <seg>跨项目配置有两个最常见的用例，相比使用约定插件更好：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They are typically used within a build although they can be externalized and accessed from a remote location.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064551Z" creationid="pingfangx" creationdate="20220420T064535Z">
        <seg>它们通常在构建内使用，尽管它们可以外部化并从远程位置访问。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They cannot have the same name as a built-in plugin id.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085124Z" creationid="pingfangx" creationdate="20220420T085112Z">
        <seg>它们不能与内置插件 id 具有相同的名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>They cannot start with &lt;c0&gt;org.gradle&lt;/c0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085108Z" creationid="pingfangx" creationdate="20220420T085105Z">
        <seg>它们无法以 &lt;c0&gt;org.gradle&lt;/c0&gt; 开头。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Things to note</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110716Z" creationid="pingfangx" creationdate="20220419T110716Z">
        <seg>注意事项</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This allows Gradle to do smart things such as:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071706Z" creationid="pingfangx" creationdate="20220420T071706Z">
        <seg>这让 Gradle 可以做一些聪明的事情，比如：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This allows plugin versions to be taken from &lt;c3&gt;gradle.properties&lt;/c3&gt;, or loaded via another mechanism.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075558Z" creationid="pingfangx" creationdate="20220420T075501Z">
        <seg>这允许从 &lt;c3&gt;gradle.properties&lt;/c3&gt; 中取出插件版本，或通过另一种机制加载。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This can be achieved in a number of ways:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070505Z" creationid="pingfangx" creationdate="20220420T070505Z">
        <seg>这可以通过多种方式实现：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This chapter aims to serve as an introduction to plugins and Gradle and the role they play.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065110Z" creationid="pingfangx" creationdate="20220420T065032Z">
        <seg>本章旨在介绍插件和 Gradle 以及他们发挥的角色。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This class does not strictly need to be imported as the &lt;c2&gt;org.gradle.api.plugins&lt;/c2&gt; package is automatically imported in all build scripts (see &lt;a3&gt;Default imports&lt;/a3&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080950Z" creationid="pingfangx" creationdate="20220420T080853Z">
        <seg>该类不需要严格地导入，因为 &lt;c2&gt;org.gradle.api.plugins&lt;/c2&gt; 包在所有构建脚本中自动导入(请参阅 &lt;a3&gt;Default imports&lt;/a3&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This ensures that the precompiled script plugins won’t be silently ignored.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085150Z" creationid="pingfangx" creationdate="20220420T085128Z">
        <seg>这确保了预编译的脚本插件不会被静默忽略。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This example has it receiving the &lt;a1&gt;Project&lt;/a1&gt; type as a type parameter.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091959Z" creationid="pingfangx" creationdate="20220420T091958Z">
        <seg>本例将 &lt;a1&gt;Project&lt;/a1&gt; 类型作为类型参数接收。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This has the benefit that the plugin is automatically compiled and included in the classpath of the build script without you having to do anything.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082122Z" creationid="pingfangx" creationdate="20220420T082121Z">
        <seg>这样做的好处是，插件会自动编译并包含在构建脚本的类路径中，而无需执行任何操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This helps to avoid collisions and provides a way to group plugins with similar ownership.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082835Z" creationid="pingfangx" creationdate="20220420T082833Z">
        <seg>这有助于避免冲突，并提供了一种将具有类似所有权的插件分组的方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is equivalent to applying &lt;c1&gt;X-conventions&lt;/c1&gt; plugin directly to a subproject.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055748Z" creationid="pingfangx" creationdate="20220408T055747Z">
        <seg>这相当于将 &lt;c1&gt;X-conventions&lt;/c1&gt; 插件直接应用于子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This is the project structure:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105029Z" creationid="pingfangx" creationdate="20220419T105029Z">
        <seg>这是项目结构：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This kind of lazy evaluation is a key benefit of accepting any value when setting a file property, then resolving that value when reading the property.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094516Z" creationid="pingfangx" creationdate="20220420T094516Z">
        <seg>这种延迟计算的一个关键好处是，在设置文件属性时接受任何值，然后在读取属性时解析该值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This limitation will be lifted in a future version of Gradle.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085325Z" creationid="pingfangx" creationdate="20220420T085323Z">
        <seg>这一限制将在未来版本的 Gradle 中取消。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This marker needs to have a dependency on the actual plugin implementation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080339Z" creationid="pingfangx" creationdate="20220420T080332Z">
        <seg>该标记需要依赖于实际的插件实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This object then becomes available as a project property with the same name as the extension object.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T093622Z" creationid="pingfangx" creationdate="20220420T093621Z">
        <seg>然后，该对象将作为与扩展对象同名的项目属性可用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This page lays out the best practices that lead to readable, maintainable projects.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T091159Z" creationid="pingfangx" creationdate="20220419T091122Z">
        <seg>本页列出了写出可读、可维护项目的最佳实践。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This plugin will automatically apply the &lt;a1&gt;Java Plugin&lt;/a1&gt;, add the &lt;c2&gt;gradleApi()&lt;/c2&gt; dependency to the api configuration, generate the required plugin descriptors in the resulting JAR file and configure the &lt;a3&gt;Plugin Marker Artifact&lt;/a3&gt; to be used when publishing.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084525Z" creationid="pingfangx" creationdate="20220420T084525Z">
        <seg>该插件将自动应用 &lt;a1&gt;Java Plugin&lt;/a1&gt;，将 &lt;c2&gt;gradleApi()&lt;/c2&gt; 依赖项添加到 api 配置中，在生成的 JAR 文件中生成所需的插件描述符，并配置发布时要使用的 &lt;a3&gt;Plugin Marker Artifact&lt;/a3&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This project is simply a Java project that produces a JAR containing the plugin classes.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084451Z" creationid="pingfangx" creationdate="20220420T084451Z">
        <seg>这个项目只是一个 Java 项目，它生成一个包含插件类的 JAR。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This project produces and publishes a JAR which you can then use in multiple builds and share with others.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082513Z" creationid="pingfangx" creationdate="20220420T082453Z">
        <seg>该项目生成并发布一个 JAR，然后你可以在多个构建中使用它，并可以与其他人共享。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This recommendation applies to single project builds as well as multi-project builds.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094225Z" creationid="pingfangx" creationdate="20220419T094211Z">
        <seg>该建议适用于单项目构建以及多项目构建。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This requires that plugins be specified in a way that Gradle can easily and quickly extract, before executing the rest of the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071810Z" creationid="pingfangx" creationdate="20220420T071809Z">
        <seg>这要求在执行构建脚本的其余部分之前，以 Gradle 可以轻松快速提取的方式指定插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sample does not have any project source code and only lays out a hypothetical project structure where two library subprojects depend on a shared internal subproject.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T110306Z" creationid="pingfangx" creationdate="20220419T110305Z">
        <seg>此示例没有任何项目源代码，只列出了一个假设的项目结构，其中两个库子项目依赖于一个共享的内部子项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sample shows how &lt;e0&gt;convention plugins&lt;/e0&gt; can be shared and applied to both the production code and the build logic code in &lt;e1&gt;buildSrc&lt;/e1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T104736Z" creationid="pingfangx" creationdate="20220419T103744Z">
        <seg>此示例显示了 &lt;e0&gt;convention plugins (约定插件)&lt;/e0&gt; 如何共享，并可应用于生产代码和 &lt;e1&gt;buildSrc&lt;/e1&gt; 中的构建逻辑代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This sample shows how build logic in a multi-project build can be organized into reusable plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105007Z" creationid="pingfangx" creationdate="20220419T104952Z">
        <seg>此示例显示了如何将多项目构建中的构建逻辑，组织为可重用插件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This script plugin simply applies the Java Library and Checkstyle Plugins and configures them.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085931Z" creationid="pingfangx" creationdate="20220420T085931Z">
        <seg>这个脚本插件只应用 Java 库和 Checkstyle 插件并对它们进行配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This site provides the ability to search for and gather information about plugins contributed by the Gradle community.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084257Z" creationid="pingfangx" creationdate="20220420T084257Z">
        <seg>该网站提供了搜索和收集 Gradle 社区提供的插件信息的能力。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This tells Gradle to first look in the Maven repository at &lt;c0&gt;../maven-repo&lt;/c0&gt; when resolving plugins and then to check the Gradle Plugin Portal if the plugins are not found in the Maven repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075129Z" creationid="pingfangx" creationdate="20220420T074548Z">
        <seg>这告诉 Gradle 在解析插件时首先在位于 &lt;c0&gt;../maven-repo&lt;/c0&gt; 的 Maven 仓库中查找，如果在该 Maven 仓库中没有找到插件，则到 Gradle Plugin Portal 中查找。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This tells Gradle to use the specified plugin implementation artifact instead of using its built-in default mapping from plugin ID to Maven/Ivy coordinates.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075943Z" creationid="pingfangx" creationdate="20220420T075911Z">
        <seg>这告诉 Gradle 使用指定的插件实现库，而不是使用插件 ID 到 Maven/Ivy 坐标的内置默认映射。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This use case can be modelled using &lt;a0&gt;outgoing configuration variants&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055917Z" creationid="pingfangx" creationdate="20220408T055813Z">
        <seg>该用例可以使用 &lt;a0&gt;传出配置变体&lt;/a0&gt; 来实现。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>This way of adding plugins to a project is much more than a more convenient syntax.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071641Z" creationid="pingfangx" creationdate="20220420T071640Z">
        <seg>这种向项目中添加插件的方式远不止是一种更方便的语法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Thus, when making small incremental changes, the &lt;a1&gt;&lt;c2&gt;--no-rebuild&lt;/c2&gt; command-line option&lt;/a1&gt; is often helpful to get faster feedback.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T100424Z" creationid="pingfangx" creationdate="20220419T100337Z">
        <seg>因此，在进行小的增量更改时，&lt;a1&gt;&lt;c2&gt;--no-rebuild&lt;/c2&gt; 命令行选项&lt;/a1&gt; 通常有助于获得更快的反馈。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To add resolution rules, use the &lt;c0&gt;resolutionStrategy {}&lt;/c0&gt; inside the &lt;c1&gt;pluginManagement {}&lt;/c1&gt; block:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T075853Z" creationid="pingfangx" creationdate="20220420T075851Z">
        <seg>要添加解析规则，请在 &lt;c1&gt;pluginManagement {}&lt;/c1&gt; 块中使用 &lt;c0&gt;resolutionStrategy {}&lt;/c0&gt;：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To apply a community plugin from the portal, the fully qualified plugin id must be used:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071558Z" creationid="pingfangx" creationdate="20220420T071531Z">
        <seg>要从 portal 应用社区插件，必须使用完全限定的插件 id：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To apply a core plugin, the short name can be used:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T071510Z" creationid="pingfangx" creationdate="20220420T071510Z">
        <seg>要应用核心插件，可以使用以下简称：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To apply a precompiled script plugin, you need to know its ID which is derived from the plugin script’s filename (minus the &lt;c0&gt;.gradle.kts&lt;/c0&gt; extension) and its (optional) package declaration.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085439Z" creationid="pingfangx" creationdate="20220420T085421Z">
        <seg>要应用预编译脚本插件，需要知道其 id，该 id 来自插件脚本的文件名(减去 &lt;c0&gt;.gradle.kts&lt;/c0&gt; 扩展名)及其(可选的)包声明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To apply a precompiled script plugin, you need to know its ID which is derived from the plugin script’s filename (minus the &lt;c0&gt;.gradle&lt;/c0&gt; extension).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085411Z" creationid="pingfangx" creationdate="20220420T085358Z">
        <seg>要应用预编译脚本插件，需要知道其 id，该 id 来自插件脚本的文件名(减去 &lt;c0&gt;.gradle&lt;/c0&gt; 扩展名)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To create a Gradle plugin, you need to write a class that implements the &lt;a0&gt;Plugin&lt;/a0&gt; interface.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091642Z" creationid="pingfangx" creationdate="20220420T091641Z">
        <seg>要创建 Gradle 插件，需要编写一个实现 &lt;a0&gt;Plugin&lt;/a0&gt; 接口的类。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To demonstrate how you can implement and use a precompiled script plugin, let’s walk through an example based on a &lt;c0&gt;buildSrc&lt;/c0&gt; project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085524Z" creationid="pingfangx" creationdate="20220420T085523Z">
        <seg>为了演示如何实现和使用预编译脚本插件，让我们浏览一个基于 &lt;c0&gt;buildSrc&lt;/c0&gt; 项目的示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To do so, Gradle will look for a Plugin Marker Artifact with the coordinates &lt;c3&gt;plugin.id:plugin.id.gradle.plugin:plugin.version&lt;/c3&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080328Z" creationid="pingfangx" creationdate="20220420T080307Z">
        <seg>为此，Gradle 将寻找带有坐标 &lt;c3&gt;plugin.id:plugin.id.gradle.plugin:plugin.version&lt;/c3&gt; 的插件标记库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To specify custom plugin repositories, use the &lt;c0&gt;repositories {}&lt;/c0&gt; block inside &lt;c1&gt;pluginManagement {}&lt;/c1&gt;:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T074539Z" creationid="pingfangx" creationdate="20220420T074516Z">
        <seg>要指定自定义插件仓库，请使用 &lt;c1&gt;pluginManagement {}&lt;/c1&gt; 中的 &lt;c0&gt;repositories {}&lt;/c0&gt; 块：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use a plugin in a build script, you need to configure the repository in &lt;c0&gt;pluginManagement {}&lt;/c0&gt; block of the project’s settings file.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084639Z" creationid="pingfangx" creationdate="20220420T084626Z">
        <seg>要在构建脚本中使用插件，需要在项目 settings 文件的 &lt;c0&gt;pluginManagement {}&lt;/c0&gt; 块中配置仓库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>To use the build logic encapsulated in a plugin, Gradle needs to perform two steps.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065321Z" creationid="pingfangx" creationdate="20220420T065320Z">
        <seg>要使用封装在插件中的构建逻辑，Gradle 需要执行两个步骤。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Toolchains for Java projects</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062505Z" creationid="pingfangx" creationdate="20220420T062504Z">
        <seg>Java 项目的工具链</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Transforming Artifacts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063102Z" creationid="pingfangx" creationdate="20220420T063054Z">
        <seg>转换产物</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Troubleshooting</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063314Z" creationid="pingfangx" creationdate="20220420T063312Z">
        <seg>故障排除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Troubleshooting Builds</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061137Z" creationid="pingfangx" creationdate="20220420T061105Z">
        <seg>构建的故障排除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Try to stick to the default conventions as much as possible except if you need to adapt to the layout of a legacy project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093939Z" creationid="pingfangx" creationdate="20220419T093938Z">
        <seg>尽量坚持默认约定，除非需要适应遗留项目的布局。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Tweaking Project Structure</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061749Z" creationid="pingfangx" creationdate="20220420T061749Z">
        <seg>调整项目结构</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Two out of three projects are more than just Java projects - they are libraries that we perhaps want to publish to an external repository.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105436Z" creationid="pingfangx" creationdate="20220419T105353Z">
        <seg>三个项目中的两个不仅仅是 Java 项目 - 它们还是我们想要发布到外部存储库的库。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Types of plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T064131Z" creationid="pingfangx" creationdate="20220420T064131Z">
        <seg>插件类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding Configuration and Execution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061654Z" creationid="pingfangx" creationdate="20220420T061646Z">
        <seg>理解配置和执行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding Gradle Module Metadata</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063133Z" creationid="pingfangx" creationdate="20220420T063133Z">
        <seg>理解 Gradle 模块元数据</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding Library and Application Differences</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062655Z" creationid="pingfangx" creationdate="20220420T062650Z">
        <seg>理解库和应用的差异</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding Resolution</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062706Z" creationid="pingfangx" creationdate="20220420T062701Z">
        <seg>理解解析</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding Variant Selection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063033Z" creationid="pingfangx" creationdate="20220420T063028Z">
        <seg>理解变体选择</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding the Build Lifecycle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061433Z" creationid="pingfangx" creationdate="20220420T061433Z">
        <seg>理解构建生命周期</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Understanding the Impact</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063249Z" creationid="pingfangx" creationdate="20220420T063249Z">
        <seg>了解影响</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upgrading Gradle</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060817Z" creationid="pingfangx" creationdate="20220420T060808Z">
        <seg>升级 Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upgrading Versions</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062843Z" creationid="pingfangx" creationdate="20220420T062843Z">
        <seg>升级版本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upload the Gradle distribution archive to a HTTP server.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101854Z" creationid="pingfangx" creationdate="20220419T101842Z">
        <seg>将 Gradle 分发包上载到 HTTP 服务器。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Upon discovery of the directory, Gradle automatically compiles and tests this code and puts it in the classpath of your build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T095129Z" creationid="pingfangx" creationdate="20220419T095129Z">
        <seg>发现目录后，Gradle 会自动编译和测试此代码，并将其放入构建脚本的类路径中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use &lt;c0&gt;buildSrc&lt;/c0&gt; to abstract imperative logic</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T094908Z" creationid="pingfangx" creationdate="20220419T094850Z">
        <seg>使用 &lt;c0&gt;buildSrc&lt;/c0&gt; 抽象必要逻辑</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use case</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105532Z" creationid="pingfangx" creationdate="20220419T105532Z">
        <seg>用例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Use standard conventions as much as possible</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093755Z" creationid="pingfangx" creationdate="20220419T092542Z">
        <seg>尽量使用标准的约定插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>User Manual PDF</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063443Z" creationid="pingfangx" creationdate="20220420T063442Z">
        <seg>用户手册 PDF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Gradle Plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060717Z" creationid="pingfangx" creationdate="20220420T060609Z">
        <seg>使用 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using Initialization Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061334Z" creationid="pingfangx" creationdate="20220420T061334Z">
        <seg>使用初始化脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using classes from the main source set</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T031046Z" creationid="pingfangx" creationdate="20220420T031027Z">
        <seg>使用主源码集中的类</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T065314Z" creationid="pingfangx" creationdate="20220420T065314Z">
        <seg>使用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Build Cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063237Z" creationid="pingfangx" creationdate="20220420T063237Z">
        <seg>使用构建缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using the Configuration Cache</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063317Z" creationid="pingfangx" creationdate="20220420T063317Z">
        <seg>使用配置缓存</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Using your plugin in another project</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T084621Z" creationid="pingfangx" creationdate="20220420T084611Z">
        <seg>在其项目中使用插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Usually, subprojects in a multi-project build share some common traits.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052544Z" creationid="pingfangx" creationdate="20220407T101338Z">
        <seg>通常，多项目中的子项目的构建会具有一些共同的特征。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Verifying dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062710Z" creationid="pingfangx" creationdate="20220420T062708Z">
        <seg>验证依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Viewing and Debugging Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062659Z" creationid="pingfangx" creationdate="20220420T062656Z">
        <seg>查看和调试依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We can model this use case by layering two separate plugins that each define the type of project that applies them:</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T105807Z" creationid="pingfangx" creationdate="20220419T105806Z">
        <seg>我们可以通过分层两个独立的插件来建模这个用例，每个插件定义应用它们的项目类型：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend putting source code and tests for the convention plugins in the special &lt;c0&gt;buildSrc&lt;/c0&gt; directory in the root directory of the project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093741Z" creationid="pingfangx" creationdate="20220408T053132Z">
        <seg>我们建议将约定插件（译注：convention plugin，后同）的源代码和测试代码，放在项目根目录的特殊 &lt;c0&gt;buildSrc&lt;/c0&gt; 目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend that you also create a &lt;c0&gt;buildSrc/settings.gradle.kts&lt;/c0&gt; file, which you may leave empty.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085845Z" creationid="pingfangx" creationdate="20220420T085837Z">
        <seg>我们建议你也创建一个 &lt;c0&gt;buildSrc/settings.gradle.kts&lt;/c0&gt; 文件，可以将其留空。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>We recommend that you also create a &lt;c0&gt;buildSrc/settings.gradle&lt;/c0&gt; file, which you may leave empty.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085835Z" creationid="pingfangx" creationdate="20220420T085827Z">
        <seg>我们建议你也创建一个 &lt;c0&gt;buildSrc/settings.gradle&lt;/c0&gt; 文件，可以将其留空。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What is Dependency Management?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062634Z" creationid="pingfangx" creationdate="20220420T062631Z">
        <seg>什么是依赖管理？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What is Gradle?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060738Z" creationid="pingfangx" creationdate="20220420T060726Z">
        <seg>什么是 Gradle？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What is new?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T060837Z" creationid="pingfangx" creationdate="20220420T060837Z">
        <seg>新版说明</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>What plugins do</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063858Z" creationid="pingfangx" creationdate="20220420T063856Z">
        <seg>插件做什么</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When declaring the outputs of a task, make sure that the directory for writing outputs is unique among all the tasks in your project.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101043Z" creationid="pingfangx" creationdate="20220419T101043Z">
        <seg>声明任务的输出时，请确保用于写入输出的目录在项目中的所有任务中是唯一的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When developing Gradle Plugins, it is important to be cautious when logging information to the build log.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090416Z" creationid="pingfangx" creationdate="20220420T090416Z">
        <seg>在开发 Gradle 插件时，在将信息记录到构建日志中时一定要谨慎。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When developing custom tasks and plugins, it’s a good idea to be very flexible when accepting input configuration for file locations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094215Z" creationid="pingfangx" creationdate="20220420T094215Z">
        <seg>在开发自定义任务和插件时，最好在接受文件位置的输入配置时非常灵活。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>When the plugin is applied to a project, Gradle creates an instance of the plugin class and calls the instance’s &lt;a1&gt;Plugin.apply()&lt;/a1&gt; method.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T091651Z" creationid="pingfangx" creationdate="20220420T091650Z">
        <seg>当插件应用于项目时，Gradle 会创建插件类的一个实例，并调用该实例的 &lt;a1&gt;Plugin.apply()&lt;/a1&gt; 方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where &lt;c0&gt;«plugin id»&lt;/c0&gt; and &lt;c1&gt;«plugin version»&lt;/c1&gt; must be constant, literal, strings and the &lt;c2&gt;apply&lt;/c2&gt; statement with a &lt;c3&gt;boolean&lt;/c3&gt; can be used to disable the default behavior of applying the plugin immediately (e.g. you want to apply it only in &lt;c4&gt;subprojects&lt;/c4&gt;).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072416Z" creationid="pingfangx" creationdate="20220420T072323Z">
        <seg>其中 &lt;c0&gt;«plugin id»&lt;/c0&gt; 和 &lt;c1&gt;«plugin version»&lt;/c1&gt; 必须是常量，字面量，字符串，带 &lt;c3&gt;boolean&lt;/c3&gt; 的 &lt;c2&gt;apply&lt;/c2&gt; 语句可用于禁用立即应用插件的默认行为(例如，你希望仅在 &lt;c4&gt;subprojects&lt;/c4&gt; 中应用它)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where &lt;c0&gt;«plugin id»&lt;/c0&gt;, in case &lt;c1&gt;#1&lt;/c1&gt; is a static Kotlin extension property, named after the core plugin ID ; and in cases &lt;c2&gt;#2&lt;/c2&gt; and &lt;c3&gt;#3&lt;/c3&gt; is a string.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072636Z" creationid="pingfangx" creationdate="20220420T072506Z">
        <seg>其中 &lt;c0&gt;«plugin id»&lt;/c0&gt;限制为，场景 &lt;c1&gt;#1&lt;/c1&gt; 是一个静态 Kotlin 扩展属性，以核心插件 id 命名；场景 &lt;c2&gt;#2&lt;/c2&gt; 和 &lt;c3&gt;#3&lt;/c3&gt; 是一个字符串。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Where you put the plugin id depends on whether you are using the &lt;a4&gt;plugins DSL&lt;/a4&gt; or the &lt;a5&gt;buildscript block.&lt;/a5&gt;</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070244Z" creationid="pingfangx" creationdate="20220420T070211Z">
        <seg>放置插件 id 的位置取决于你使用的是 &lt;a4&gt;plugins DSL&lt;/a4&gt; 还是 &lt;a5&gt;buildscript 块&lt;/a5&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>While those conventions can be reconfigured, it makes it harder to build script users and authors to manage the build logic and its outcome.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093921Z" creationid="pingfangx" creationdate="20220419T093920Z">
        <seg>虽然这些约定可以重新配置，但它使构建脚本的用户和作者更难管理构建逻辑及其结果。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Why use the Build Cache?</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T063245Z" creationid="pingfangx" creationdate="20220420T063245Z">
        <seg>为什么要使用构建缓存？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With cross configuration, build logic can be injected into a subproject and this is not obvious when looking at the subproject’s build script, making it harder to understand the logic of a particular subproject.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T055231Z" creationid="pingfangx" creationdate="20220408T055132Z">
        <seg>通过跨项目配置，可以将构建逻辑注入子项目，但这在查看子项目的构建脚本时不能明显看到，使得难以理解特定子项目的逻辑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>With the introduction of the &lt;a0&gt;plugins DSL&lt;/a0&gt;, users should have little reason to use the legacy method of applying plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T080701Z" creationid="pingfangx" creationdate="20220420T080632Z">
        <seg>随着 &lt;a0&gt;plugins DSL&lt;/a0&gt; 的引入，用户应该一般不会使用应用插件的旧版方法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Dependencies</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062558Z" creationid="pingfangx" creationdate="20220420T062547Z">
        <seg>使用依赖</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Files</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061536Z" creationid="pingfangx" creationdate="20220420T061510Z">
        <seg>文件相关操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with Logging</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061517Z" creationid="pingfangx" creationdate="20220420T061517Z">
        <seg>使用日志记录</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Working with files in custom tasks and plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081737Z" creationid="pingfangx" creationdate="20220420T081737Z">
        <seg>在自定义任务和插件中使用文件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Build Scripts</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061454Z" creationid="pingfangx" creationdate="20220420T061453Z">
        <seg>编写构建脚本</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Custom Gradle Types and Service Injection</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T062151Z" creationid="pingfangx" creationdate="20220420T062150Z">
        <seg>编写自定义 Gradle 类型和服务注入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing Gradle Task Types</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T061930Z" creationid="pingfangx" creationdate="20220420T061924Z">
        <seg>编写 Gradle 任务类型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing a simple plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081726Z" creationid="pingfangx" creationdate="20220420T081726Z">
        <seg>写一个简单的插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Writing tests for your plugin</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081759Z" creationid="pingfangx" creationdate="20220420T081758Z">
        <seg>为插件编写测试</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You apply plugins by their &lt;e0&gt;plugin id&lt;/e0&gt;, which is a globally unique identifier, or name, for plugins.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T070109Z" creationid="pingfangx" creationdate="20220420T070040Z">
        <seg>你可以通过插件的 &lt;e0&gt;plugin id&lt;/e0&gt; 来应用插件，该 id 是插件的全局唯一标识符或名称。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can achieve that with the help of initialization scripts.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T101412Z" creationid="pingfangx" creationdate="20220419T101405Z">
        <seg>你可以通过初始化脚本来实现这一点。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can apply plugins that reside in a project’s &lt;e0&gt;buildSrc&lt;/e0&gt; directory as long as they have a defined ID.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T073758Z" creationid="pingfangx" creationdate="20220420T073656Z">
        <seg>你可以应用驻留在项目的 &lt;e0&gt;buildSrc&lt;/e0&gt; 目录中的插件，只要它们具有定义的 ID 即可。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can compose custom build logic by applying and configuring both core and external plugins and create custom plugins that define new project &lt;e0&gt;types&lt;/e0&gt; and configure conventions specific to your project or organization.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T093729Z" creationid="pingfangx" creationdate="20220408T052937Z">
        <seg>您可以通过应用和配置核心插件和外部插件来组合自定义构建逻辑，创建自定义插件，定义新的项目 &lt;e0&gt;类型&lt;/e0&gt;，并配置特定于您的项目或组织的约定逻辑。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can create a separate project for your plugin.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082449Z" creationid="pingfangx" creationdate="20220420T082440Z">
        <seg>你可以为插件创建一个单独的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can find out more about implementing project extensions in &lt;a0&gt;Developing Custom Gradle Types&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094152Z" creationid="pingfangx" creationdate="20220420T094128Z">
        <seg>您可以在 &lt;a0&gt;Developing Custom Gradle Types&lt;/a0&gt; 中了解有关实现项目扩展的更多信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can implement a Gradle plugin in any language you like, provided the implementation ends up compiled as JVM bytecode.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T081929Z" creationid="pingfangx" creationdate="20220420T081915Z">
        <seg>你可以用任何喜欢的语言实现 Gradle 插件，前提是该语言最终编译为 JVM 字节码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can include the source for the plugin directly in the build script.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082112Z" creationid="pingfangx" creationdate="20220420T082104Z">
        <seg>你可以在构建脚本中直接包含插件的源代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can open this sample inside an IDE using the &lt;a0&gt;IntelliJ native importer&lt;/a0&gt; or &lt;a1&gt;Eclipse Buildship&lt;/a1&gt;.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220419T103741Z" creationid="pingfangx" creationdate="20220419T103733Z">
        <seg>你可以使用 &lt;a0&gt;IntelliJ native importer&lt;/a0&gt; 或 &lt;a1&gt;Eclipse Buildship&lt;/a1&gt; 在 IDE 中打开此示例。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can provide configuration for your plugin by adding an extension object to this container.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T092242Z" creationid="pingfangx" creationdate="20220420T092236Z">
        <seg>你可以通过向该容器添加扩展对象来为插件提供配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can put the source for the plugin in the &lt;c0&gt;&lt;e1&gt;rootProjectDir&lt;/e1&gt;/buildSrc/src/main/java&lt;/c0&gt; directory (or &lt;c2&gt;&lt;e3&gt;rootProjectDir&lt;/e3&gt;/buildSrc/src/main/groovy&lt;/c2&gt; or &lt;c4&gt;&lt;e5&gt;rootProjectDir&lt;/e5&gt;/buildSrc/src/main/kotlin&lt;/c4&gt; depending on which language you prefer).</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082248Z" creationid="pingfangx" creationdate="20220420T082157Z">
        <seg>取决于你喜欢的语言，你可以将插件的源代码放在 &lt;c0&gt;&lt;e1&gt;rootProjectDir&lt;/e1&gt;/buildSrc/src/main/java&lt;/c0&gt; 目录中(或 &lt;c2&gt;&lt;e3&gt;rootProjectDir&lt;/e3&gt;/buildSrc/src/main/groovy&lt;/c2&gt; 或 &lt;c4&gt;&lt;e5&gt;rootProjectDir&lt;/e5&gt;/buildSrc/src/main/kotlin&lt;/c4&gt;)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You can use the &lt;a0&gt;ProjectBuilder&lt;/a0&gt; class to create &lt;a1&gt;Project&lt;/a1&gt; instances to use when you test your plugin implementation.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T090300Z" creationid="pingfangx" creationdate="20220420T090240Z">
        <seg>你可以使用 &lt;a0&gt;ProjectBuilder&lt;/a0&gt; 类创建 &lt;a1&gt;Project&lt;/a1&gt; 实例，以便在测试插件实现时使用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You should use Gradle’s &lt;a0&gt;managed properties&lt;/a0&gt; and &lt;c1&gt;project.layout&lt;/c1&gt; to select file or directory locations.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094235Z" creationid="pingfangx" creationdate="20220420T094226Z">
        <seg>你应该使用 Gradle 的 &lt;a0&gt;managed properties&lt;/a0&gt; 和 &lt;c1&gt;project.layout&lt;/c1&gt; 以选择文件或目录位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You will notice that in the example above we specify the &lt;c4&gt;greetingFile&lt;/c4&gt; property value after we have configured to use it for the task.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T094512Z" creationid="pingfangx" creationdate="20220420T094420Z">
        <seg>你会注意到，在上面的示例中，我们在配置为将其用于任务后才指定了 &lt;c4&gt;greetingFile&lt;/c4&gt; 属性值。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>You write these as &lt;c0&gt;*.gradle&lt;/c0&gt; files in &lt;c1&gt;src/main/groovy&lt;/c1&gt; directory or &lt;c2&gt;*.gradle.kts&lt;/c2&gt; files in &lt;c3&gt;src/main/kotlin&lt;/c3&gt; directory.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T085055Z" creationid="pingfangx" creationdate="20220420T085036Z">
        <seg>你把它们写成 &lt;c0&gt;*.gradle&lt;/c0&gt; 文件位于 &lt;c1&gt;src/main/groovy&lt;/c1&gt; 目录中，或 &lt;c2&gt;*.gradle.kts&lt;/c2&gt; 文件位于 &lt;c3&gt;src/main/kotlin&lt;/c3&gt; 目录中。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>Your plugin id should be a combination of components that reflect namespace (a reasonable pointer to you or your organization) and the name of the plugin it provides.</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T082914Z" creationid="pingfangx" creationdate="20220420T082849Z">
        <seg>插件 id 应该是反映名称空间(指向你或你的组织的合理指针)及其提供的插件名称的组件的组合。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>etc</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220408T052357Z" creationid="pingfangx" creationdate="20220408T052357Z">
        <seg>等</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>for binary Gradle plugins that need to be resolved</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072155Z" creationid="pingfangx" creationdate="20220420T072127Z">
        <seg>对于需要解析的二进制 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>for core Gradle plugins</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072202Z" creationid="pingfangx" creationdate="20220420T072158Z">
        <seg>用于核心 Gradle 插件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-US">
        <seg>for core Gradle plugins or plugins already available to the build script</seg>
      </tuv>
      <tuv lang="zh-CN" changeid="pingfangx" changedate="20220420T072126Z" creationid="pingfangx" creationdate="20220420T072110Z">
        <seg>对于核心 Gradle 插件或已在构建脚本中可用的插件</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
